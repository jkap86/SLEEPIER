{"version":3,"file":"static/js/708.ddaa10d3.chunk.js","mappings":"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","sources":["modules/COMMON/components/Standings/Standings.js","modules/COMMON/components/Standings/index.js","modules/Trades/services/helpers/getTradeTips.js","modules/Trades/redux/actions.js","modules/Trades/services/hooks/useFetchLmTrades.js","modules/Trades/components/Trade.js","modules/Trades/components/LmTrades.js","modules/Trades/services/hooks/useFetchPcTrades.js","modules/Trades/components/PcTrades.js","modules/Trades/components/Trades1.js","modules/Trades/components/TradeTips.js","modules/Trades/components/Trades2.js","modules/Trades/components/Trades3.js","modules/Trades/index.js"],"sourcesContent":["import TableMain from \"../TableMain\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Roster from \"../Roster\";\r\nimport { useState } from \"react\";\r\n\r\nconst Standings = ({ league, trade_value_date, current_value_date }) => {\r\n    const dispatch = useDispatch();\r\n    const [itemActive2, setItemActive2] = useState('')\r\n\r\n\r\n    const active_roster = league.rosters.find(x => x.roster_id === itemActive2);\r\n\r\n    const standings = league.rosters\r\n        ?.map(roster => {\r\n            return {\r\n                roster_id: roster.roster_id,\r\n                username: roster.username,\r\n                avatar: roster.avatar,\r\n                wins: roster.settings.wins,\r\n                losses: roster.settings.losses,\r\n                ties: roster.settings.ties,\r\n                fpts: parseFloat(roster.settings.fpts + '.' + roster.settings.fpts_decimal),\r\n                fpts_against: parseFloat(roster.settings.fpts_against + '.' + roster.settings.fpts_against_decimal)\r\n            }\r\n        })\r\n        ?.sort((a, b) => b.wins - a.wins || b.fpts - a.fpts)\r\n\r\n    const standings_headers = [\r\n        [\r\n            {\r\n                text: 'Manager',\r\n                colSpan: 5,\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 2,\r\n            },\r\n            {\r\n                text: 'FP',\r\n                colSpan: 3\r\n            }\r\n        ]\r\n    ];\r\n\r\n    const standings_body = standings\r\n        ?.map((team, index) => {\r\n            const record = standings.find(s => s.roster_id === team.roster_id)\r\n            return {\r\n                id: team.roster_id,\r\n                list: [\r\n                    {\r\n                        text: team.username || 'Orphan',\r\n                        colSpan: 5,\r\n                        className: 'left',\r\n                        image: {\r\n                            src: team.avatar,\r\n                            alt: 'user avatar',\r\n                            type: 'user'\r\n                        }\r\n                    },\r\n                    {\r\n                        text: `${record.wins}-${record.losses}${record.ties > 0 ? `-${record.ties}` : ''}`,\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: (record.fpts).toLocaleString(\"en-US\", { maximumFractionDigits: 2, minimumFractionDigits: 2 }),\r\n                        colSpan: 3\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n\r\n\r\n    const leagueInfo_headers = [[]]\r\n\r\n    const leagueInfo_body = []\r\n    return <>\r\n        <TableMain\r\n            type={'secondary half'}\r\n            headers={standings_headers}\r\n            body={standings_body}\r\n            itemActive={itemActive2}\r\n            setItemActive={(value) => setItemActive2(value)}\r\n        />\r\n        {\r\n            active_roster\r\n                ? <Roster\r\n                    type={'secondary half'}\r\n                    league={league}\r\n                    roster={active_roster}\r\n                    module={'Leagues'}\r\n                    trade_value_date={trade_value_date}\r\n                    current_value_date={current_value_date}\r\n                />\r\n                : <TableMain\r\n                    type={'secondary half'}\r\n                    headers={leagueInfo_headers}\r\n                    body={leagueInfo_body}\r\n                />\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Standings;","import Standings from \"./Standings\";\r\n\r\nexport default Standings;","export const getTradeTips = (trades, leagues, leaguemates, season) => {\r\n\r\n    let trade_tips = trades.map(trade => {\r\n\r\n        let trade_away = []\r\n\r\n        Object.keys(trade.adds || {}).map(add => {\r\n            const lm_user_id = trade.adds[add]\r\n            if (lm_user_id) {\r\n                return leagues\r\n                    .filter(league =>\r\n                        league.rosters.find(r => r.user_id === lm_user_id) && league.userRoster.user_id !== lm_user_id\r\n                        && league.userRoster.players?.includes(add)\r\n                        && league.league_id !== trade.leagueLeagueId\r\n                    )\r\n                    .map(league => {\r\n                        const lmRoster = league.rosters.find(r => r.user_id === lm_user_id)\r\n                        return trade_away.push({\r\n                            type: 'player',\r\n                            player_id: add,\r\n                            manager: {\r\n                                user_id: lm_user_id,\r\n                                username: lmRoster?.username || 'Orphan',\r\n                                avatar: lmRoster?.avatar\r\n                            },\r\n                            league: {\r\n                                league_id: league.league_id,\r\n                                name: league.name,\r\n                                avatar: league.avatar,\r\n                                roster_positions: league.roster_positions\r\n                            },\r\n                            userRoster: league.userRoster,\r\n                            lmRoster: league.rosters.find(r => r.user_id === lm_user_id)\r\n                        })\r\n                    })\r\n            }\r\n        })\r\n\r\n        trade.draft_picks.map(pick => {\r\n            const lm_user_id = pick.new_user.user_id\r\n            if (lm_user_id) {\r\n                return leagues\r\n                    .filter(league =>\r\n                        league.rosters.find(r => r.user_id === lm_user_id) && league.userRoster.user_id !== lm_user_id\r\n                        &&\r\n                        league.userRoster?.draft_picks?.find(pickLM => {\r\n                            return parseInt(pick.season) === pickLM.season && pick.round === pickLM.round && (parseInt(pick.season) !== parseInt(season) || pick.order === pickLM.order)\r\n                        })\r\n                        && league.league_id !== trade.leagueLeagueId\r\n                    )\r\n                    .map(league => {\r\n                        const lmRoster = league.rosters.find(r => r.user_id === lm_user_id)\r\n                        return trade_away.push({\r\n                            type: 'pick',\r\n                            player_id: pick,\r\n                            manager: {\r\n                                user_id: lm_user_id,\r\n                                username: lmRoster?.username || 'Orphan',\r\n                                avatar: lmRoster?.avatar\r\n                            },\r\n                            league: {\r\n                                league_id: league.league_id,\r\n                                name: league.name,\r\n                                avatar: league.avatar,\r\n                                roster_positions: league.roster_positions\r\n                            },\r\n                            userRoster: league.userRoster,\r\n                            lmRoster: league.rosters.find(r => r.user_id === lm_user_id)\r\n                        })\r\n                    })\r\n            }\r\n        })\r\n\r\n        let acquire = []\r\n\r\n        Object.keys(trade.drops || {}).map(drop => {\r\n            const lm_user_id = trade.drops[drop]\r\n            if (lm_user_id) {\r\n                return leagues\r\n                    .filter(league =>\r\n                        league.rosters.find(r => r.user_id === lm_user_id) && league.userRoster.user_id !== lm_user_id\r\n                        &&\r\n                        (\r\n                            league.rosters?.find(r => r.roster_id !== league.userRoster.roster_id && (r.user_id === lm_user_id || r.co_owners?.find(co => co.user_id === lm_user_id)))?.players?.includes(drop)\r\n                            && league.league_id !== trade.leagueLeagueId\r\n\r\n                        )\r\n                    )\r\n                    .map(league => {\r\n                        const lmRoster = league.rosters.find(r => r.user_id === lm_user_id)\r\n                        return acquire.push({\r\n                            type: 'player',\r\n                            player_id: drop,\r\n                            manager: {\r\n                                user_id: lm_user_id,\r\n                                username: lmRoster?.username || 'Orphan',\r\n                                avatar: lmRoster?.avatar\r\n                            },\r\n                            league: {\r\n                                league_id: league.league_id,\r\n                                name: league.name,\r\n                                avatar: league.avatar,\r\n                                roster_positions: league.roster_positions\r\n                            },\r\n                            userRoster: league.userRoster,\r\n                            lmRoster: league.rosters.find(r => r.user_id === lm_user_id)\r\n                        })\r\n                    })\r\n            }\r\n        })\r\n\r\n        trade.draft_picks.map(pick => {\r\n            const lm_user_id = pick.old_user.user_id\r\n            if (lm_user_id) {\r\n                return leagues\r\n                    .filter(league =>\r\n                        league.rosters.find(r => r.user_id === lm_user_id) && league.userRoster.user_id !== lm_user_id\r\n                        &&\r\n                        league.rosters?.find(r => r.roster_id !== league.userRoster.roster_id && (r.user_id === lm_user_id || r.co_owners?.find(co => co.user_id === lm_user_id)))?.draft_picks?.find(pickLM => {\r\n                            return parseInt(pick.season) === pickLM.season && pick.round === pickLM.round && (parseInt(pick.season) !== parseInt(season) || pick.order === pickLM.order)\r\n                        })\r\n                        && league.league_id !== trade.leagueLeagueId\r\n                    )\r\n                    .map(league => {\r\n                        const lmRoster = league.rosters.find(r => r.user_id === lm_user_id)\r\n                        return acquire.push({\r\n                            type: 'pick',\r\n                            player_id: pick,\r\n                            manager: {\r\n                                user_id: lm_user_id,\r\n                                username: lmRoster?.username || 'Orphan',\r\n                                avatar: lmRoster?.avatar\r\n                            },\r\n                            league: {\r\n                                league_id: league.league_id,\r\n                                name: league.name,\r\n                                avatar: league.avatar,\r\n                                roster_positions: league.roster_positions\r\n                            },\r\n                            userRoster: league.userRoster,\r\n                            lmRoster: league.rosters.find(r => r.user_id === lm_user_id)\r\n                        })\r\n                    })\r\n            }\r\n        })\r\n\r\n        return {\r\n            ...trade,\r\n            tips: {\r\n                acquire: acquire,\r\n                trade_away: trade_away\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    return trade_tips\r\n}","import axios from 'axios';\r\nimport { getTradeTips } from '../services/helpers/getTradeTips';\r\n\r\n\r\nexport const setStateTrades = (state_obj, tab) => ({\r\n    type: `SET_STATE_TRADES`,\r\n    payload: state_obj\r\n})\r\n\r\nexport const fetchLmTrades = (user_id, leagues, season, offset, limit, hash, trade_date, more = false) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'FETCH_TRADES_START' });\r\n\r\n        try {\r\n            const trades = await axios.post('/trade/leaguemate', {\r\n                user_id: user_id,\r\n                offset: offset,\r\n                limit: limit,\r\n                type1: hash.split('-')[0],\r\n                type2: hash.split('-')[1],\r\n                trade_date: trade_date\r\n            })\r\n\r\n\r\n\r\n\r\n            const trades_tips = getTradeTips(trades.data.rows, leagues, season)\r\n\r\n            console.log({ more })\r\n\r\n            dispatch({\r\n                type: 'FETCH_LMTRADES_SUCCESS', payload: {\r\n                    count: trades.data.count,\r\n                    trades: trades_tips,\r\n                    hash: hash,\r\n                    more: more,\r\n                    trade_date: trade_date\r\n\r\n                }\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: 'FETCH_TRADES_FAILURE', payload: error.message })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchFilteredLmTrades = (searchedPlayerId, searchedManagerId, league_season, offset, limit, hash, trade_date) => async (dispatch, getState) => {\r\n    dispatch({ type: 'FETCH_TRADES_START' });\r\n\r\n    const state = getState();\r\n\r\n    const { user } = state;\r\n\r\n    try {\r\n        const trades = await axios.post('/trade/leaguemate', {\r\n            user_id: user.user_id,\r\n            player: searchedPlayerId,\r\n            manager: searchedManagerId,\r\n            offset: offset,\r\n            limit: limit,\r\n            type1: hash.split('-')[0],\r\n            type2: hash.split('-')[1],\r\n            trade_date: trade_date\r\n        });\r\n\r\n        const trades_tips = getTradeTips(trades.data.rows, user.leagues, league_season)\r\n\r\n        dispatch({\r\n            type: 'FETCH_FILTERED_LMTRADES_SUCCESS',\r\n            payload: {\r\n                player: searchedPlayerId,\r\n                manager: searchedManagerId,\r\n                trades: trades_tips,\r\n                count: trades.data.count,\r\n                hash: hash,\r\n                trade_date: trade_date\r\n            },\r\n        });\r\n    } catch (error) {\r\n        dispatch({ type: 'FETCH_TRADES_FAILURE', payload: error.message });\r\n    }\r\n\r\n\r\n};\r\n\r\nexport const fetchPriceCheckTrades = (pricecheck_player, pricecheck_player2, offset, limit) => async (dispatch, getState) => {\r\n    dispatch({ type: 'FETCH_TRADES_START' });\r\n\r\n    const state = getState();\r\n\r\n    const { user, common } = state;\r\n\r\n    try {\r\n        const player_trades = await axios.post('/trade/pricecheck', {\r\n            player: pricecheck_player,\r\n            player2: pricecheck_player2,\r\n            offset: offset,\r\n            limit: limit\r\n        })\r\n\r\n        console.log({player_trades})\r\n        const trades_tips = getTradeTips(player_trades.data.rows, user.leagues, common.state.league_season)\r\n        console.log({trades_tips})\r\n        dispatch({\r\n            type: 'FETCH_PRICECHECKTRADES_SUCCESS',\r\n            payload: {\r\n                pricecheck_player: pricecheck_player,\r\n                pricecheck_player2: pricecheck_player2,\r\n                trades: trades_tips,\r\n                count: player_trades.data.count,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        dispatch({ type: 'FETCH_TRADES_FAILURE', payload: error.message });\r\n    }\r\n\r\n};","import { fetchLmTrades } from \"../../redux/actions\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst useFetchLmTrades = () => {\r\n    const dispatch = useDispatch();\r\n    const { state } = useSelector(state => state.common);\r\n    const { user_id, leagues, type1, type2 } = useSelector(state => state.user);\r\n    const { trade_date, lmTrades } = useSelector(state => state.trades);\r\n\r\n    const hash = `${type1}-${type2}`;\r\n\r\n    useEffect(() => {\r\n        if (\r\n            leagues\r\n            && !lmTrades.searched_player.id\r\n            && !lmTrades.searched_manager.id\r\n            && !(lmTrades.trades[hash]?.trade_date === trade_date)\r\n        ) {\r\n            dispatch(fetchLmTrades(user_id, leagues, state.league_season, 0, 125, hash, trade_date))\r\n        }\r\n    }, [\r\n        user_id,\r\n        leagues,\r\n        state.league_season,\r\n        hash,\r\n        trade_date,\r\n        lmTrades.searched_player.id,\r\n        lmTrades.searched_manager.id,\r\n        lmTrades.trades.trade_date,\r\n        dispatch\r\n    ])\r\n\r\n}\r\n\r\nexport default useFetchLmTrades;","import React from \"react\";\r\nimport TableMain from \"../../COMMON/components/TableMain\";\r\nimport Avatar from \"../../COMMON/components/Avatar\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTrendColor } from \"../../COMMON/services/helpers/getTrendColor\";\r\n\r\nconst Trade = ({\r\n    trade,\r\n    trade_value_date\r\n}) => {\r\n    const { state: stateState, allplayers, values } = useSelector(state => state.common)\r\n\r\n    const date = new Date().toISOString().split('T')[0];\r\n\r\n    const type = trade['league.roster_positions']\r\n        .filter(p => p === 'QB' || p === 'SUPER_FLEX')\r\n        .length > 1\r\n        ? 'sf'\r\n        : 'oneqb'\r\n\r\n    const no_qb = trade['league.roster_positions']\r\n        .filter(p => p === 'QB')\r\n        .length\r\n\r\n    const no_sf = trade['league.roster_positions']\r\n        .filter(p => p === 'SUPER_FLEX')\r\n        .length\r\n\r\n    const no_te = trade['league.roster_positions']\r\n        .filter(p => p === 'TE')\r\n        .length\r\n\r\n    const te_prem = trade['league.scoring_settings']?.bonus_rec_te || 0\r\n\r\n    const getTradeValue = (player_id, date, type) => {\r\n        const formatted_date = `${date.split('-')[1]}-${date.split('-')[2]}-${date.split('-')[0].slice(2, 4)}`\r\n\r\n        const value = (values || {})?.[formatted_date]?.[player_id]?.[type]\r\n\r\n\r\n\r\n        return value\r\n    }\r\n\r\n    const getKtcPickName = (pick) => {\r\n\r\n        const suffix = pick.round === 1\r\n            ? 'st'\r\n            : pick.round === 2\r\n                ? 'nd'\r\n                : pick.round === 3\r\n                    ? 'rd'\r\n                    : 'th'\r\n\r\n        return `${pick.season} ${pick.order >= 1 && (pick.order <= 4 ? 'Early' : pick.order >= 9 ? 'Late' : 'Mid') || 'Mid'} ${pick.round}${suffix}`\r\n    }\r\n\r\n    return <TableMain\r\n        type={'trade_summary'}\r\n        headers={[]}\r\n        body={\r\n            [\r\n                {\r\n                    id: 'title',\r\n                    list: [\r\n                        {\r\n                            text: <div className=\"timestamp\">\r\n                                <div>{new Date(parseInt(trade.status_updated)).toLocaleDateString('en-US')}</div>\r\n                                <div>{new Date(parseInt(trade.status_updated)).toLocaleTimeString('en-US', { hour: \"2-digit\", minute: \"2-digit\" })}</div>\r\n                            </div>,\r\n                            colSpan: 3,\r\n                            className: 'small wrap'\r\n                        },\r\n                        {\r\n                            text: <>\r\n                                < div>\r\n                                    {\r\n                                        trade['league.settings'].type === 2\r\n                                            ? 'Dynasty'\r\n                                            : trade['league.settings'].type === 1\r\n                                                ? 'Keeper'\r\n                                                : 'Redraft'\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {trade['league.settings'].best_ball === 1\r\n                                        ? 'Bestball'\r\n                                        : 'Lineup'}\r\n                                </div>\r\n                            </>,\r\n                            colSpan: 2,\r\n                            className: 'type'\r\n                        },\r\n                        {\r\n                            text: trade['league.name'],\r\n                            colSpan: 8,\r\n                            image: {\r\n                                src: trade?.['league.avatar'],\r\n                                alt: 'league avatar',\r\n                                type: 'league'\r\n                            },\r\n                            className: 'left'\r\n                        },\r\n                        {\r\n                            text: <>\r\n                                <div>\r\n                                    {no_qb.toString()} QB {no_sf.toString()} SF\r\n                                </div>\r\n                                <div>\r\n                                    {no_te.toString()} TE {te_prem.toLocaleString('en-US', { maximumFractionDigits: 2})} Prem\r\n                                </div>\r\n                            </>,\r\n                            colSpan: 3,\r\n                            className: 'type'\r\n                        }\r\n                    ]\r\n                },\r\n                ...trade.managers.map(rid => {\r\n                    const roster = trade.rosters?.find(r => r.user_id === rid)\r\n\r\n                    const trade_value_players = Object.keys(trade.adds || {})\r\n                        .filter(a => trade.adds[a] === roster?.user_id)\r\n                        .reduce((acc, cur) => acc + getTradeValue(cur, trade_value_date, type) || 0, 0)\r\n\r\n                    const trade_value_picks = trade.draft_picks\r\n                        .filter(p => p.owner_id === roster?.roster_id)\r\n                        .reduce((acc, cur) => acc + getTradeValue(getKtcPickName(cur), trade_value_date, type) || 0, 0)\r\n\r\n                    const trade_value_total = trade_value_players + trade_value_picks\r\n\r\n                    const current_value_players = Object.keys(trade.adds || {})\r\n                        .filter(a => trade.adds[a] === roster?.user_id)\r\n                        .reduce((acc, cur) => acc + getTradeValue(cur, date, type) || getTradeValue(cur, new Date(new Date() - 24 * 60 * 60 * 1000).toISOString().split('T')[0], type) || 0, 0)\r\n\r\n                    const current_value_picks = trade.draft_picks\r\n                        .filter(p => p.owner_id === roster?.roster_id)\r\n                        .reduce((acc, cur) => acc + getTradeValue(getKtcPickName(cur), date, type) || getTradeValue(getKtcPickName(cur), new Date(new Date() - 24 * 60 * 60 * 1000).toISOString().split('T')[0], type) || 0, 0)\r\n\r\n                    const current_value_total = current_value_players + current_value_picks\r\n\r\n                    const trend_total = current_value_total - trade_value_total\r\n\r\n                    return {\r\n                        id: trade.transaction_id,\r\n                        list: [\r\n\r\n                            {\r\n                                text: <div className='trade_manager'>\r\n                                    <div>\r\n                                        <p className='value'>\r\n                                            KTC -&nbsp;\r\n                                            {\r\n                                                trade_value_total\r\n                                            }\r\n                                        </p>\r\n                                        <p\r\n                                            className={(trend_total > 0 ? 'green trend' : trend_total < 0 ? 'red trend' : 'trend')}\r\n                                            style={getTrendColor(trend_total, 1.5)}\r\n                                        >\r\n                                            {\r\n                                                trend_total > 0 ? '+' : ''\r\n                                            }\r\n                                            {\r\n                                                trend_total.toString()\r\n                                            }\r\n\r\n                                        </p>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p className='left'>\r\n                                            {\r\n                                                <Avatar\r\n                                                    avatar_id={roster?.avatar}\r\n                                                    alt={'user avatar'}\r\n                                                    type={'user'}\r\n                                                />\r\n                                            }\r\n                                            <span>{roster?.username || 'Orphan'}</span>\r\n                                        </p>\r\n                                    </div>\r\n                                </div>,\r\n                                colSpan: 5,\r\n                                className: 'left trade_manager'\r\n                            },\r\n                            {\r\n                                text: <table className='trade_info'>\r\n                                    <tbody>\r\n                                        {\r\n                                            Object.keys(trade.adds || {}).filter(a => trade.adds[a] === roster?.user_id).map(player_id => {\r\n\r\n                                                const value = getTradeValue(player_id, date, type) || getTradeValue(player_id, new Date(new Date() - 24 * 60 * 60 * 1000).toISOString().split('T')[0], type)\r\n\r\n                                                const trade_value = getTradeValue(player_id, trade_value_date, type) || 0\r\n\r\n                                                const trend = (value || 0) - (trade_value || 0)\r\n\r\n\r\n                                                return <tr>\r\n                                                    <td colSpan={11} className={\r\n                                                        `${trade.tips?.trade_away && trade.tips?.trade_away?.find(p => p.player_id === player_id)?.manager.user_id === rid\r\n\r\n                                                            ? 'red left'\r\n                                                            : 'left'\r\n                                                        }`\r\n                                                    } ><p><span >+ {allplayers[player_id]?.full_name}</span></p></td>\r\n                                                    <td className='value'\r\n                                                        colSpan={4}>\r\n                                                        {trade_value.toString()}\r\n                                                    </td>\r\n                                                    <td\r\n                                                        colSpan={4}\r\n                                                    >\r\n                                                        <p\r\n                                                            className={'stat value'}\r\n                                                            style={getTrendColor(trend, 1)}\r\n                                                        >\r\n                                                            {\r\n                                                                trend > 0 ? '+' : ''\r\n                                                            }\r\n                                                            {trend}\r\n                                                        </p>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            })\r\n                                        }\r\n                                        {\r\n                                            trade.draft_picks\r\n                                                .filter(p => p.owner_id === roster?.roster_id)\r\n                                                .sort((a, b) => (a.season) - b.season || a.round - b.round)\r\n                                                .map(pick => {\r\n                                                    const ktc_name = getKtcPickName(pick)\r\n\r\n                                                    const value = getTradeValue(ktc_name, date, type) || getTradeValue(ktc_name, new Date(new Date() - 24 * 60 * 60 * 1000).toISOString().split('T')[0], type)\r\n\r\n                                                    const trade_value = getTradeValue(ktc_name, trade_value_date, type) || 0\r\n\r\n                                                    const trend = (value || 0) - (trade_value || 0)\r\n                                                    return <tr>\r\n                                                        <td\r\n                                                            colSpan={11}\r\n                                                            className={`${trade.tips?.trade_away && trade.tips?.trade_away\r\n                                                                ?.find(p =>\r\n                                                                    p?.player_id?.season === pick.season\r\n                                                                    && p?.player_id?.round === pick.round\r\n                                                                    && p?.player_id?.order === pick.order\r\n                                                                )?.manager?.user_id === rid ? 'red left' : 'left'}`}\r\n                                                        >\r\n                                                            {\r\n                                                                <p><span>{`+ ${pick.season} Round ${pick.round}${pick.order && pick.season === stateState.league_season ? `.${pick.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}` : ` (${pick.original_user?.username || 'Orphan'})`}`}</span></p>\r\n                                                            }\r\n                                                        </td>\r\n                                                        <td className='value' colSpan={4}>\r\n                                                            {\r\n                                                                trade_value.toString()\r\n                                                            }\r\n                                                        </td>\r\n                                                        <td\r\n                                                            colSpan={4}\r\n                                                        >\r\n                                                            <p\r\n                                                                className={'stat value'}\r\n                                                                style={getTrendColor(trend, 1)}\r\n                                                            >\r\n                                                                {\r\n                                                                    trend > 0 ? '+' : ''\r\n                                                                }\r\n                                                                {trend}\r\n                                                            </p>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                })\r\n                                        }\r\n                                    </tbody>\r\n                                </table>,\r\n                                colSpan: 7,\r\n                                rowSpan: 2,\r\n                                className: 'small'\r\n                            },\r\n                            {\r\n                                text: <table className='trade_info'>\r\n                                    <tbody>\r\n                                        {\r\n                                            Object.keys(trade.drops || {}).filter(d => trade.drops[d] === roster?.user_id).map(player_id =>\r\n\r\n                                                <tr>\r\n                                                    <td\r\n                                                        className={'left end' + `${trade.tips?.acquire && trade.tips?.acquire?.find(p => p.player_id === player_id)?.manager?.user_id === rid\r\n                                                            ? 'green'\r\n                                                            : ''\r\n                                                            }`}\r\n                                                        colSpan={4}>\r\n\r\n                                                        <p>\r\n                                                            <span className='end'>\r\n                                                                {\r\n                                                                    (`- ${allplayers[player_id]?.full_name}`).toString()\r\n                                                                }\r\n                                                            </span>\r\n                                                        </p>\r\n\r\n                                                    </td>\r\n                                                </tr>\r\n\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            trade.draft_picks\r\n                                                .filter(p => p.previous_owner_id === roster?.roster_id)\r\n                                                .sort((a, b) => (a.season) - b.season || a.round - b.round)\r\n                                                .map(pick =>\r\n                                                    <tr >\r\n                                                        <td\r\n                                                            colSpan={4}\r\n                                                            className={'left end ' + `${trade.tips?.acquire && trade.tips?.acquire\r\n                                                                ?.find(p =>\r\n                                                                    p?.player_id?.season === pick.season\r\n                                                                    && p?.player_id?.round === pick.round\r\n                                                                    && p?.player_id?.order === pick.order\r\n                                                                )?.manager?.user_id === rid ? 'green left' : 'left'}`}\r\n                                                        >\r\n                                                            <p>\r\n                                                                <span className=\"end\">\r\n                                                                    {\r\n                                                                        (`- ${pick.season} Round ${pick.round}${pick.order && pick.season === stateState.league_season ? `.${pick.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}` : ` (${pick.original_user?.username || 'Orphan'})`}`).toString()\r\n                                                                    }\r\n                                                                </span>\r\n                                                            </p>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                        }\r\n                                    </tbody>\r\n                                </table>,\r\n                                colSpan: 4,\r\n                                rowSpan: 2,\r\n                                className: 'small'\r\n                            }\r\n                        ]\r\n\r\n                    }\r\n                })\r\n\r\n            ]\r\n        }\r\n    />\r\n}\r\n\r\nexport default React.memo(Trade);","import TableMain from \"../../COMMON/components/TableMain\";\r\nimport useFetchLmTrades from \"../services/hooks/useFetchLmTrades\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Trade from \"./Trade\";\r\nimport { setStateTrades, fetchLmTrades, fetchFilteredLmTrades } from \"../redux/actions\";\r\nimport {  useMemo } from \"react\";\r\nimport useFetchPlayerValues from \"../../COMMON/services/hooks/useFetchPlayerValues\";\r\nimport LoadingIcon from '../../COMMON/components/LoadingIcon';\r\n\r\nconst LmTrades = ({\r\n    trades_headers,\r\n    players_list,\r\n    tradeCount,\r\n    secondaryTable\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const { state, values } = useSelector(state => state.common);\r\n    const { type1, type2, user_id, leagues } = useSelector(state => state.user);\r\n    const { lmTrades, trade_date, isLoading } = useSelector(state => state.trades);\r\n\r\n    useFetchLmTrades()\r\n\r\n    const hash = `${type1}-${type2}`\r\n\r\n    const tradesDisplay = (!lmTrades.searched_player?.id && !lmTrades.searched_manager?.id)\r\n        ? lmTrades.trades?.[hash]?.trades || []\r\n        : (\r\n            lmTrades.searches\r\n                ?.find(\r\n                    s => s.player === lmTrades.searched_player.id\r\n                        && s.manager === lmTrades.searched_manager.id\r\n                        && s.hash === hash\r\n                        && s.trade_date === trade_date\r\n                )?.trades\r\n            || []\r\n        )\r\n\r\n    const player_ids = useMemo(() => {\r\n        return tradesDisplay\r\n            .sort((a, b) => parseInt(b.status_updated) - parseInt(a.status_updated))\r\n            .slice((lmTrades.page - 1) * 25, ((lmTrades.page - 1) * 25) + 25)\r\n            .flatMap(t => Object.keys(t.adds))\r\n\r\n    }, [tradesDisplay, lmTrades.page])\r\n\r\n\r\n\r\n    useFetchPlayerValues({ player_ids })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const trades_body = tradesDisplay\r\n        ?.sort((a, b) => parseInt(b.status_updated) - parseInt(a.status_updated))\r\n        ?.map(trade => {\r\n            const trade_value_date_raw = new Date(parseInt(trade.status_updated)).toISOString().split('T')[0];\r\n            const trade_value_date_formatted = `${trade_value_date_raw.split('-')[1]}-${trade_value_date_raw.split('-')[2]}-${trade_value_date_raw.split('-')[0].slice(2, 4)}`\r\n\r\n            const current_value_date_raw = new Date().toISOString().split('T')[0];\r\n            const current_value_date_formatted = `${current_value_date_raw.split('-')[1]}-${current_value_date_raw.split('-')[2]}-${current_value_date_raw.split('-')[0].slice(2, 4)}`\r\n\r\n            return {\r\n                id: trade.transaction_id,\r\n                list: [\r\n\r\n                    {\r\n                        text: <Trade trade={trade} trade_value_date={trade_value_date_raw} />,\r\n                        colSpan: 10,\r\n                        className: `small `\r\n                    }\r\n\r\n                ],\r\n                secondary_table: secondaryTable({\r\n                    league: {\r\n                        rosters: trade.rosters,\r\n                        roster_positions: trade['league.roster_positions']\r\n                    },\r\n                    trade: trade,\r\n                    trade_value_date: trade_value_date_formatted,\r\n                    current_value_date: current_value_date_formatted\r\n                })\r\n            }\r\n        }) || []\r\n\r\n    const loadMore = async () => {\r\n        console.log('LOADING MORE')\r\n\r\n\r\n\r\n        if (lmTrades.searched_player === '' && lmTrades.searched_manager === '') {\r\n            dispatch(fetchLmTrades(user_id, leagues, state.league_season, tradesDisplay.length, 125, hash, trade_date, true))\r\n        } else {\r\n            dispatch(fetchFilteredLmTrades(lmTrades.searched_player.id, lmTrades.searched_manager.id, state.league_season, tradesDisplay.length, 125, hash, trade_date, true))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return isLoading\r\n        ? <LoadingIcon />\r\n        : <>\r\n            <div className=\"trade_search_wrapper\">\r\n\r\n            </div>\r\n            <TableMain\r\n                id={'trades'}\r\n                type={'primary'}\r\n                headers={trades_headers}\r\n                body={trades_body}\r\n                itemActive={lmTrades.itemActive}\r\n                setItemActive={(item) => dispatch(setStateTrades({ lmTrades: { ...lmTrades, itemActive: item } }))}\r\n                page={lmTrades.page}\r\n                setPage={(page) => dispatch(setStateTrades({ lmTrades: { ...lmTrades, page: page } }))}\r\n                partial={tradesDisplay?.length < tradeCount ? true : false}\r\n                loadMore={loadMore}\r\n                isLoading={isLoading}\r\n            />\r\n\r\n        </>\r\n}\r\n\r\nexport default LmTrades;","import { fetchPriceCheckTrades } from \"../../redux/actions\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst useFetchPcTrades = () => {\r\n    const dispatch = useDispatch();\r\n    const { state } = useSelector(state => state.common);\r\n    const { user_id, leagues, type1, type2 } = useSelector(state => state.user);\r\n    const { trade_date, pricecheckTrades, isLoading } = useSelector(state => state.trades);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (\r\n            !isLoading\r\n            && pricecheckTrades.pricecheck_player.id\r\n            && !pricecheckTrades.searches \r\n                .find(\r\n                    pc => pc.pricecheck_player === pricecheckTrades.pricecheck_player.id\r\n                        && (!pricecheckTrades.pricecheck_player2?.id\r\n                            || pc.pricecheck_player2 === pricecheckTrades.pricecheck_player2.id)\r\n                )\r\n        ) {\r\n            dispatch(fetchPriceCheckTrades(pricecheckTrades.pricecheck_player.id, pricecheckTrades.pricecheck_player2.id, 0, 125))\r\n        }\r\n    }, [pricecheckTrades.pricecheck_player, isLoading,  pricecheckTrades.pricecheck_player2, dispatch])\r\n\r\n}\r\n\r\nexport default useFetchPcTrades;","import TableMain from \"../../COMMON/components/TableMain\";\r\nimport { useMemo } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Trade from \"./Trade\";\r\nimport { setStateTrades, fetchPriceCheckTrades } from \"../redux/actions\";\r\nimport Search from \"../../COMMON/components/Search\";\r\nimport useFetchPcTrades from \"../services/hooks/useFetchPcTrades\";\r\nimport useFetchPlayerValues from \"../../COMMON/services/hooks/useFetchPlayerValues\";\r\nimport LoadingIcon from \"../../COMMON/components/LoadingIcon\";\r\n\r\nconst PcTrades = ({\r\n    trades_headers,\r\n    players_list,\r\n    tradeCount,\r\n    secondaryTable\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        isLoading,\r\n        pricecheckTrades,\r\n        trade_date\r\n    } = useSelector(state => state.trades);\r\n\r\n\r\n    useFetchPcTrades();\r\n\r\n    const tradesDisplay = pricecheckTrades.searches.find(pcTrade => pcTrade.pricecheck_player === pricecheckTrades.pricecheck_player.id && pcTrade.pricecheck_player2 === pricecheckTrades.pricecheck_player2.id)?.trades || []\r\n\r\n    const player_ids = useMemo(() => {\r\n        return tradesDisplay\r\n            .sort((a, b) => parseInt(b.status_updated) - parseInt(a.status_updated))\r\n            .slice((pricecheckTrades.page - 1) * 25, ((pricecheckTrades.page - 1) * 25) + 25)\r\n            .flatMap(t => Object.keys(t.adds))\r\n\r\n    }, [tradesDisplay, pricecheckTrades.page])\r\n\r\n\r\n\r\n    useFetchPlayerValues({ player_ids })\r\n\r\n\r\n    const loadMore = async () => {\r\n        console.log('LOADING MORE')\r\n        dispatch(setStateTrades({ pricecheckTrades: { ...pricecheckTrades, page: Math.floor(tradesDisplay.length / 25) + 1 } }, 'TRADES'))\r\n        dispatch(fetchPriceCheckTrades(pricecheckTrades.pricecheck_player.id, pricecheckTrades.pricecheck_player2.id, tradesDisplay.length, 125))\r\n    }\r\n\r\n    const trades_body = tradesDisplay\r\n        ?.sort((a, b) => parseInt(b.status_updated) - parseInt(a.status_updated))\r\n        ?.filter(\r\n            trade => (\r\n                new Date(parseInt(trade.status_updated))\r\n                    ?.toISOString().split('T')[0]\r\n                <= new Date(trade_date)\r\n                    ?.toISOString().split('T')[0]\r\n            ) && (\r\n                    new Date(parseInt(trade.status_updated))\r\n                        ?.toISOString().split('T')[0]\r\n                    >= new Date(new Date(trade_date) - 7 * 24 * 60 * 60 * 1000)\r\n                        ?.toISOString().split('T')[0]\r\n                )\r\n        )\r\n        ?.map(trade => {\r\n            const trade_value_date_raw = new Date(parseInt(trade.status_updated)).toISOString().split('T')[0];\r\n            const trade_value_date_formatted = `${trade_value_date_raw.split('-')[1]}-${trade_value_date_raw.split('-')[2]}-${trade_value_date_raw.split('-')[0].slice(2, 4)}`\r\n\r\n            const current_value_date_raw = new Date().toISOString().split('T')[0];\r\n            const current_value_date_formatted = `${current_value_date_raw.split('-')[1]}-${current_value_date_raw.split('-')[2]}-${current_value_date_raw.split('-')[0].slice(2, 4)}`\r\n\r\n\r\n            return {\r\n                id: trade.transaction_id,\r\n                list: [\r\n\r\n                    {\r\n                        text: <Trade trade={trade} trade_value_date={trade_value_date_raw} />,\r\n                        colSpan: 10,\r\n                        className: `small `\r\n                    }\r\n\r\n                ],\r\n                secondary_table: secondaryTable({\r\n                    league: {\r\n                        rosters: trade.rosters,\r\n                        roster_positions: trade['league.roster_positions']\r\n                    },\r\n                    trade: trade,\r\n                    trade_value_date: trade_value_date_formatted,\r\n                    current_value_date: current_value_date_formatted\r\n                })\r\n            }\r\n        }) || []\r\n\r\n    return <>\r\n        <div className=\"trade_search_wrapper\">\r\n            <Search\r\n                id={'By Player'}\r\n                placeholder={`Player`}\r\n                list={players_list}\r\n                searched={pricecheckTrades.pricecheck_player}\r\n                setSearched={(searched) => dispatch(setStateTrades({ pricecheckTrades: { ...pricecheckTrades, pricecheck_player: searched } }))}\r\n            />\r\n            {\r\n                !pricecheckTrades.pricecheck_player?.id  ? null :\r\n                    <>\r\n                        <Search\r\n                            id={'By Player'}\r\n                            placeholder={`Player`}\r\n                            list={players_list}\r\n                            searched={pricecheckTrades.pricecheck_player2}\r\n                            setSearched={(searched) => dispatch(setStateTrades({ pricecheckTrades: { ...pricecheckTrades, pricecheck_player2: searched } }))}\r\n                        />\r\n                    </>\r\n            }\r\n        </div>\r\n        {\r\n            isLoading\r\n                ? <LoadingIcon />\r\n                : <TableMain\r\n                    id={'trades'}\r\n                    type={'primary'}\r\n                    headers={trades_headers}\r\n                    body={trades_body}\r\n                    itemActive={pricecheckTrades.itemActive}\r\n                    setItemActive={(item) => dispatch(setStateTrades({ pricecheckTrades: { ...pricecheckTrades, itemActive: item } }))}\r\n                    page={pricecheckTrades.page}\r\n                    setPage={(page) => dispatch(setStateTrades({ pricecheckTrades: { ...pricecheckTrades, page: page } }))}\r\n                    partial={tradesDisplay?.length < tradeCount ? true : false}\r\n                    loadMore={loadMore}\r\n                    isLoading={isLoading}\r\n\r\n                />\r\n        }\r\n    </>\r\n}\r\n\r\nexport default PcTrades;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport LmTrades from \"./LmTrades\";\r\nimport PcTrades from \"./PcTrades\";\r\nimport { setStateTrades } from \"../redux/actions\";\r\nimport './Trades.css';\r\n\r\nconst Trades1 = ({ secondaryTable }) => {\r\n    const dispatch = useDispatch();\r\n    const { state, allplayers } = useSelector(state => state.common);\r\n    const { type1, type2, leagues } = useSelector(state => state.user);\r\n    const { tabPrimary, trade_date, lmTrades, pricecheckTrades, isLoading } = useSelector(state => state.trades);\r\n\r\n    const hash = `${type1}-${type2}`;\r\n\r\n    let tradeCount;\r\n\r\n    switch (tabPrimary) {\r\n        case 'Leaguemate Trades':\r\n            tradeCount = (!lmTrades.searched_player?.id && !lmTrades.searched_manager?.id)\r\n                ? lmTrades.trades?.[hash]?.count\r\n                : lmTrades.searches\r\n                    ?.find(\r\n                        s => s.player === lmTrades.searched_player.id\r\n                            && s.manager === lmTrades.searched_manager.id\r\n                    )\r\n                    ?.count\r\n            break;\r\n        case 'Price Check':\r\n            const trades = pricecheckTrades.searches\r\n                .find(\r\n                    pcTrade => pcTrade.pricecheck_player === pricecheckTrades.pricecheck_player.id\r\n                        && pcTrade.pricecheck_player2 === pricecheckTrades.pricecheck_player2.id\r\n                )\r\n                ?.trades\r\n                || []\r\n\r\n            tradeCount = (trades?.count || 0)\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    const trades_headers = [\r\n        [\r\n            {\r\n                text: 'Date',\r\n                colSpan: 3\r\n            },\r\n            {\r\n                text: 'League',\r\n                colSpan: 7\r\n            }\r\n        ]\r\n    ];\r\n\r\n    const picks_list = []\r\n\r\n    Array.from(Array(4).keys()).map(season => {\r\n        return Array.from(Array(5).keys()).map(round => {\r\n            if (season !== 0) {\r\n                return picks_list.push({\r\n                    id: `${season + parseInt(state.league_season)} ${round + 1}.${null}`,\r\n                    text: `${season + parseInt(state.league_season)}  Round ${round + 1}`,\r\n                    image: {\r\n                        src: null,\r\n                        alt: 'pick headshot',\r\n                        type: 'player'\r\n                    }\r\n                })\r\n            } else {\r\n                return Array.from(Array(12).keys()).map(order => {\r\n                    return picks_list.push({\r\n                        id: `${season + parseInt(state.league_season)} ${round + 1}.${season === 0 ? (order + 1).toLocaleString(\"en-US\", { minimumIntegerDigits: 2 }) : null}`,\r\n                        text: `${season + parseInt(state.league_season)} ${season === 0 ? `${round + 1}.${(order + 1).toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}` : ` Round ${round + 1}`}`,\r\n                        image: {\r\n                            src: null,\r\n                            alt: 'pick headshot',\r\n                            type: 'player'\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    })\r\n\r\n    const players_list = leagues && [\r\n        ...Array.from(\r\n            new Set(\r\n                leagues?.map(league => league.rosters?.map(roster => roster.players)).flat(3)\r\n            )\r\n        ).map(player_id => {\r\n            return {\r\n                id: player_id,\r\n                text: allplayers[player_id]?.full_name,\r\n                image: {\r\n                    src: player_id,\r\n                    alt: 'player headshot',\r\n                    type: 'player'\r\n                }\r\n            }\r\n        }),\r\n        ...picks_list\r\n    ]\r\n\r\n    const props = {\r\n        trades_headers,\r\n        players_list,\r\n        tradeCount\r\n    }\r\n    return <>\r\n        <h2>\r\n            {\r\n                isLoading\r\n                    ? 'Loading Trades...'\r\n                    : tradeCount?.toLocaleString(\"en-US\") + ' Trades'\r\n            }\r\n        </h2>\r\n        <h2>\r\n            <select\r\n                value={tabPrimary}\r\n                onChange={(e) => dispatch(setStateTrades({ tabPrimary: e.target.value }))}\r\n                className=\"active click\"\r\n            >\r\n                <option>Price Check</option>\r\n                <option>Leaguemate Trades</option>\r\n            </select>\r\n        </h2>\r\n        <div className='date'>\r\n            <input\r\n                type='date'\r\n                value={new Date(trade_date).toISOString().split('T')[0]}\r\n                onChange={(e) => dispatch(setStateTrades({ trade_date: new Date(e.target.value.split('T')[0]) }))}\r\n            />\r\n            to\r\n            <input\r\n                type='date'\r\n                value={new Date(new Date(trade_date) - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}\r\n                onChange={(e) => dispatch(setStateTrades({ trade_date: new Date(e.target.value.split('T')[0]) }))}\r\n            />\r\n        </div>\r\n        {\r\n            tabPrimary === \"Leaguemate Trades\"\r\n                ? <LmTrades {...props} secondaryTable={secondaryTable} />\r\n                : <PcTrades  {...props} secondaryTable={secondaryTable} />\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Trades1;","import TableMain from \"../../COMMON/components/TableMain\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst TradeTips = ({ trade, secondaryTable }) => {\r\n    const { state: stateState, allplayers: stateAllPlayers } = useSelector(state => state.common);\r\n    const { user_id } = useSelector(state => state.user);\r\n    const [itemActive, setItemActive] = useState('');\r\n\r\n    const trade_acquisitions_headers = [\r\n        [\r\n            {\r\n                text: 'Potential Acquisitions',\r\n                colSpan: 9,\r\n                className: 'half'\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                text: 'Manager',\r\n                colSpan: 3,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Player',\r\n                colSpan: 3,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'League',\r\n                colSpan: 3,\r\n                className: 'half'\r\n            }\r\n\r\n        ]\r\n    ]\r\n\r\n    const trade_acquisitions_body = !trade.tips?.acquire?.length > 0 ? [{ id: 'NONE', list: [{ text: '-', colSpan: 9 }] }] : trade.tips?.acquire?.map(add => {\r\n\r\n        return {\r\n            id: `${add.manager.user_id}_${add.type === 'player' ? stateAllPlayers[add.player_id]?.full_name\r\n                : `${add.player_id.season} ` + (add.player_id.season === stateState.league_season && add.player_id.order ? `${add.player_id.round}.${add.player_id.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}`\r\n                    : add.manager.user_id !== user_id ? `Round ${add.player_id.round} (${add.manager.username})`\r\n                        : `Round ${add.player_id.round}`)}_${add.league.league_id}`,\r\n            list: [\r\n                {\r\n                    text: add.manager.username,\r\n                    colSpan: 3,\r\n                    className: 'left',\r\n                    image: {\r\n                        src: add.manager.avatar,\r\n                        alt: 'manager avatar',\r\n                        type: 'user'\r\n                    }\r\n                },\r\n                {\r\n                    text: add.type === 'player' ? stateAllPlayers[add.player_id]?.full_name\r\n                        : `${add.player_id.season} ` + (add.player_id.season === stateState.league_season && add.player_id.order ? `${add.player_id.round}.${add.player_id.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}`\r\n                            : add.manager.user_id !== user_id ? `Round ${add.player_id.round} (${add.manager.username})`\r\n                                : `Round ${add.player_id.round}`),\r\n                    colSpan: 3,\r\n                    className: 'left',\r\n                    image: {\r\n                        src: add.player_id,\r\n                        alt: 'player headshot',\r\n                        type: 'player'\r\n                    }\r\n                },\r\n                {\r\n                    text: add.league.name,\r\n                    colSpan: 3,\r\n                    className: 'left end',\r\n                    image: {\r\n                        src: add.league.avatar,\r\n                        alt: 'league avatar',\r\n                        type: 'league'\r\n                    }\r\n                }\r\n            ],\r\n            secondary_table: ''\r\n        }\r\n\r\n    })\r\n\r\n    const trade_flips_headers = [\r\n        [\r\n            {\r\n                text: 'Potential Flips',\r\n                colSpan: 9,\r\n                className: 'half'\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                text: 'Manager',\r\n                colSpan: 3,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Player',\r\n                colSpan: 3,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'League',\r\n                colSpan: 3,\r\n                className: 'half'\r\n            }\r\n\r\n        ]\r\n    ]\r\n\r\n    const trade_flips_body = !trade.tips?.trade_away?.length > 0 ? [{ id: 'NONE', list: [{ text: '-', colSpan: 9 }] }] : trade.tips?.trade_away?.map((add, index) => {\r\n\r\n        return {\r\n            id: (`${add.manager.user_id}_${add.type === 'player' ? stateAllPlayers[add.player_id]?.full_name\r\n                : `${add.player_id.season} ` + (add.player_id.season === stateState.league_season && add.player_id.order ? `${add.player_id.round}.${add.player_id.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}`\r\n                    : add.manager.user_id !== user_id ? `Round ${add.player_id.round} (${add.manager.username})`\r\n                        : `Round ${add.player_id.round}`)}_${add.league.league_id}`) + `_${index}`,\r\n            list: [\r\n                {\r\n                    text: add.manager.username,\r\n                    colSpan: 3,\r\n                    className: 'left',\r\n                    image: {\r\n                        src: add.manager.avatar,\r\n                        alt: 'manager avatar',\r\n                        type: 'user'\r\n                    }\r\n                },\r\n                {\r\n                    text: add.type === 'player' ? stateAllPlayers[add.player_id]?.full_name\r\n                        : `${add.player_id.season} ` + (add.player_id.season === stateState.league_season && add.player_id.order ? `${add.player_id.round}.${add.player_id.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })}`\r\n                            : add.manager.user_id !== user_id ? `Round ${add.player_id.round} (${add.manager.username})`\r\n                                : `Round ${add.player_id.round}`),\r\n                    colSpan: 3,\r\n                    className: 'left',\r\n                    image: {\r\n                        src: add.player_id,\r\n                        alt: 'player headshot',\r\n                        type: 'player'\r\n                    }\r\n                },\r\n                {\r\n                    text: add.league.name,\r\n                    colSpan: 3,\r\n                    className: 'left end',\r\n                    image: {\r\n                        src: add.league.avatar,\r\n                        alt: 'league avatar',\r\n                        type: 'league'\r\n                    }\r\n                }\r\n            ],\r\n            secondary_table: ''\r\n        }\r\n\r\n    })\r\n\r\n\r\n    return <>\r\n        <TableMain\r\n            type={'secondary'}\r\n            headers={trade_acquisitions_headers}\r\n            body={trade_acquisitions_body}\r\n            itemActive={itemActive}\r\n            setItemActive={setItemActive}\r\n        />\r\n\r\n        <TableMain\r\n            type={'secondary'}\r\n            headers={trade_flips_headers}\r\n            body={trade_flips_body}\r\n            itemActive={itemActive}\r\n            setItemActive={setItemActive}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default TradeTips;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { setStateTrades } from \"../redux/actions\";\r\nimport Standings from '../../COMMON/components/Standings';\r\nimport TradeTips from \"./TradeTips\";\r\n\r\nconst Trades2 = ({ ...props }) => {\r\n    const dispatch = useDispatch();\r\n    const { tabSecondary } = useSelector(state => state.trades);\r\n\r\n\r\n    return <>\r\n        <div className=\"secondary nav\">\r\n            <button\r\n                className={tabSecondary === 'Leads' ? 'active click' : 'click'}\r\n                onClick={() => dispatch(setStateTrades({ tabSecondary: 'Leads' }))}\r\n            >\r\n                Leads\r\n            </button>\r\n            <button\r\n                className={tabSecondary === 'Rosters' ? 'active click' : 'click'}\r\n                onClick={() => dispatch(setStateTrades({ tabSecondary: 'Rosters' }))}\r\n            >\r\n                Rosters\r\n            </button>\r\n        </div>\r\n        {\r\n            tabSecondary === 'Rosters'\r\n                ? <Standings {...props} />\r\n                : <TradeTips  {...props} />\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Trades2;","\r\n\r\nconst Trades3 = ({ ...props }) => {\r\n\r\n    return <>TRADES 3</>\r\n}\r\n\r\nexport default Trades3;","import Trades1 from \"./components/Trades1\";\r\nimport Trades2 from \"./components/Trades2\";\r\nimport Trades3 from \"./components/Trades3\";\r\n\r\nconst Trades = () => {\r\n    return <Trades1\r\n        secondaryTable={\r\n            (props) => {\r\n                return <Trades2\r\n                    {...props}\r\n                    secondaryTable={\r\n                        (props2) => {\r\n                            return <Trades3\r\n                                {...props2}\r\n                            />\r\n                        }\r\n                    }\r\n                />\r\n            }\r\n        }\r\n    />\r\n}\r\n\r\nexport default Trades;"],"names":["_ref","_league$rosters","_league$rosters$map","league","trade_value_date","current_value_date","useDispatch","itemActive2","setItemActive2","useState","active_roster","rosters","find","x","roster_id","standings","map","roster","username","avatar","wins","settings","losses","ties","fpts","parseFloat","fpts_decimal","fpts_against","fpts_against_decimal","sort","a","b","standings_body","team","index","record","s","id","list","text","colSpan","className","image","src","alt","type","concat","toLocaleString","maximumFractionDigits","minimumFractionDigits","_jsxs","_Fragment","children","_jsx","TableMain","headers","body","itemActive","setItemActive","value","Roster","module","getTradeTips","trades","leagues","leaguemates","season","trade","trade_away","Object","keys","adds","add","lm_user_id","filter","_league$userRoster$pl","r","user_id","userRoster","players","includes","league_id","leagueLeagueId","lmRoster","push","player_id","manager","name","roster_positions","draft_picks","pick","new_user","_league$userRoster","_league$userRoster$dr","pickLM","parseInt","round","order","acquire","drops","drop","_league$rosters$find","_league$rosters$find$","_r$co_owners","co_owners","co","old_user","_league$rosters2","_league$rosters2$find","_league$rosters2$find2","_r$co_owners2","tips","setStateTrades","state_obj","tab","payload","fetchLmTrades","offset","limit","hash","trade_date","more","arguments","length","undefined","async","dispatch","axios","post","type1","split","type2","trades_tips","data","rows","console","log","count","error","message","fetchPriceCheckTrades","pricecheck_player","pricecheck_player2","getState","state","user","common","player_trades","player","player2","league_season","useFetchLmTrades","useSelector","lmTrades","useEffect","_lmTrades$trades$hash","searched_player","searched_manager","Trade","_trade$leagueScoring","stateState","allplayers","values","date","Date","toISOString","p","no_qb","no_sf","no_te","te_prem","bonus_rec_te","getTradeValue","_ref2","_ref2$formatted_date","_ref2$formatted_date$","formatted_date","slice","getKtcPickName","suffix","status_updated","toLocaleDateString","toLocaleTimeString","hour","minute","best_ball","toString","managers","rid","_trade$rosters","trade_value_total","reduce","acc","cur","owner_id","trend_total","transaction_id","style","getTrendColor","Avatar","avatar_id","_trade$tips","_trade$tips2","_trade$tips2$trade_aw","_trade$tips2$trade_aw2","_allplayers$player_id","trade_value","trend","full_name","_trade$tips3","_trade$tips4","_trade$tips4$trade_aw","_trade$tips4$trade_aw2","_trade$tips4$trade_aw3","_pick$original_user","ktc_name","_p$player_id","_p$player_id2","_p$player_id3","minimumIntegerDigits","original_user","rowSpan","d","_trade$tips5","_trade$tips6","_trade$tips6$acquire","_trade$tips6$acquire$","_trade$tips6$acquire$2","_allplayers$player_id2","previous_owner_id","_trade$tips7","_trade$tips8","_trade$tips8$acquire","_trade$tips8$acquire$","_trade$tips8$acquire$2","_pick$original_user2","_p$player_id4","_p$player_id5","_p$player_id6","React","_lmTrades$searched_pl","_lmTrades$searched_ma","_lmTrades$trades","_lmTrades$searches","_lmTrades$searches$fi","_tradesDisplay$sort","trades_headers","players_list","tradeCount","secondaryTable","isLoading","tradesDisplay","searches","player_ids","useMemo","page","flatMap","t","useFetchPlayerValues","trades_body","trade_value_date_raw","trade_value_date_formatted","current_value_date_raw","current_value_date_formatted","secondary_table","LoadingIcon","item","setPage","partial","loadMore","fetchFilteredLmTrades","searchedPlayerId","searchedManagerId","useFetchPcTrades","pricecheckTrades","pc","_pricecheckTrades$pri","_pricecheckTrades$sea","_tradesDisplay$sort$f","pcTrade","_Date","_Date2","_Date3","_Date4","Search","placeholder","searched","setSearched","Math","floor","_tradeCount","tabPrimary","picks_list","Array","from","props","Set","flat","onChange","e","target","LmTrades","PcTrades","_trade$tips$acquire","_trade$tips2$acquire","_trade$tips3$trade_aw","stateAllPlayers","trade_acquisitions_body","_stateAllPlayers$add$","_stateAllPlayers$add$2","trade_flips_body","_stateAllPlayers$add$3","_stateAllPlayers$add$4","tabSecondary","onClick","Standings","TradeTips","Trades","Trades1","Trades2","props2","Trades3"],"sourceRoot":""}