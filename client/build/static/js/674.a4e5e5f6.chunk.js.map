{"version":3,"file":"static/js/674.a4e5e5f6.chunk.js","mappings":"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","sources":["modules/COMMON/components/Standings/Standings.js","modules/COMMON/components/Standings/index.js","modules/COMMON/services/helpers/filterLeagues.js","modules/COMMON/services/helpers/getUserRoster.js","modules/COMMON/services/hooks/useFetchUserInfo.js","modules/Leagues/redux/actions.js","modules/Leagues/components/Records.js","modules/Leagues/components/Leagues1.js","modules/Leagues/components/Leagues2.js","modules/Leagues/index.js"],"sourcesContent":["import TableMain from \"../TableMain\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Roster from \"../Roster\";\r\nimport { useState } from \"react\";\r\n\r\nconst Standings = ({ league, trade_value_date, current_value_date }) => {\r\n    const dispatch = useDispatch();\r\n    const [itemActive2, setItemActive2] = useState('')\r\n\r\n\r\n    const active_roster = league.rosters.find(x => x.roster_id === itemActive2);\r\n\r\n    const standings = league.rosters\r\n        ?.map(roster => {\r\n            return {\r\n                roster_id: roster.roster_id,\r\n                username: roster.username,\r\n                avatar: roster.avatar,\r\n                wins: roster.settings.wins,\r\n                losses: roster.settings.losses,\r\n                ties: roster.settings.ties,\r\n                fpts: parseFloat(roster.settings.fpts + '.' + roster.settings.fpts_decimal),\r\n                fpts_against: parseFloat(roster.settings.fpts_against + '.' + roster.settings.fpts_against_decimal)\r\n            }\r\n        })\r\n        ?.sort((a, b) => b.wins - a.wins || b.fpts - a.fpts)\r\n\r\n    const standings_headers = [\r\n        [\r\n            {\r\n                text: 'Manager',\r\n                colSpan: 5,\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 2,\r\n            },\r\n            {\r\n                text: 'FP',\r\n                colSpan: 3\r\n            }\r\n        ]\r\n    ];\r\n\r\n    const standings_body = standings\r\n        ?.map((team, index) => {\r\n            const record = standings.find(s => s.roster_id === team.roster_id)\r\n            return {\r\n                id: team.roster_id,\r\n                list: [\r\n                    {\r\n                        text: team.username || 'Orphan',\r\n                        colSpan: 5,\r\n                        className: 'left',\r\n                        image: {\r\n                            src: team.avatar,\r\n                            alt: 'user avatar',\r\n                            type: 'user'\r\n                        }\r\n                    },\r\n                    {\r\n                        text: `${record.wins}-${record.losses}${record.ties > 0 ? `-${record.ties}` : ''}`,\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: (record.fpts).toLocaleString(\"en-US\", { maximumFractionDigits: 2, minimumFractionDigits: 2 }),\r\n                        colSpan: 3\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n\r\n\r\n    const leagueInfo_headers = [[]]\r\n\r\n    const leagueInfo_body = []\r\n    return <>\r\n        <TableMain\r\n            type={'secondary half'}\r\n            headers={standings_headers}\r\n            body={standings_body}\r\n            itemActive={itemActive2}\r\n            setItemActive={(value) => setItemActive2(value)}\r\n        />\r\n        {\r\n            active_roster\r\n                ? <Roster\r\n                    type={'secondary half'}\r\n                    league={league}\r\n                    roster={active_roster}\r\n                    module={'Leagues'}\r\n                    trade_value_date={trade_value_date}\r\n                    current_value_date={current_value_date}\r\n                />\r\n                : <TableMain\r\n                    type={'secondary half'}\r\n                    headers={leagueInfo_headers}\r\n                    body={leagueInfo_body}\r\n                />\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Standings;","import Standings from \"./Standings\";\r\n\r\nexport default Standings;","\r\nexport const filterLeagues = (leagues, type1, type2) => {\r\n    return (leagues || []).filter(league => {\r\n        let include_1;\r\n\r\n        switch (type1) {\r\n            case ('Redraft'):\r\n                include_1 = league.settings.type !== 2;\r\n                break;\r\n            case ('All'):\r\n                include_1 = true;\r\n                break;\r\n            case ('Dynasty'):\r\n                include_1 = league.settings.type === 2;\r\n                break;\r\n            default:\r\n                include_1 = true;\r\n                break;\r\n        }\r\n\r\n        let include_2;\r\n\r\n        switch (type2) {\r\n            case ('Bestball'):\r\n                include_2 = league.settings.best_ball === 1;\r\n                break;\r\n            case ('All'):\r\n                include_2 = true;\r\n                break;\r\n            case ('Lineup'):\r\n                include_2 = league.settings.best_ball !== 1;\r\n                break;\r\n            default:\r\n                include_2 = true;\r\n                break;\r\n        }\r\n\r\n        return (include_1 && include_2)\r\n    })\r\n}","export const getUserRoster = (rosters, user_id) => {\r\n    return rosters\r\n        ?.find(r => r.user_id === user_id || r.co_owners?.find(co => co?.user_id === user_id))\r\n}\r\n\r\n","import { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { resetState } from \"../../redux/actions\";\r\nimport { fetchUser, fetchLeagues } from \"../../redux/actions\";\r\nimport { fetchCommon } from \"../../redux/actions\";\r\n\r\nconst useFetchUserInfo = (to_fetch_array) => {\r\n    const dispatch = useDispatch();\r\n    const params = useParams();\r\n    const { user_id, isLoadingUser, username, leagues, isLoadingLeagues } = useSelector(state => state.user);\r\n    const { allplayers } = useSelector(state => state.common);\r\n\r\n    useEffect(() => {\r\n        if (username && username?.toLowerCase() !== params.username?.toLowerCase()) {\r\n            dispatch(resetState());\r\n        }\r\n    }, [dispatch, username, params.username])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!user_id && !isLoadingUser) {\r\n            dispatch(fetchUser(params.username))\r\n        }\r\n    }, [dispatch, user_id, params.username, isLoadingUser])\r\n\r\n    useEffect(() => {\r\n        if (user_id && !leagues && !isLoadingLeagues) {\r\n            dispatch(fetchLeagues(user_id));\r\n        }\r\n    }, [dispatch, user_id, leagues, isLoadingLeagues]);\r\n\r\n    useEffect(() => {\r\n        if (leagues) {\r\n            if (!allplayers) {\r\n                dispatch(fetchCommon('allplayers'))\r\n            }\r\n\r\n        }\r\n    }, [dispatch, allplayers, leagues])\r\n\r\n\r\n}\r\n\r\nexport default useFetchUserInfo;","\r\nexport const setState = (state_obj, tab) => ({\r\n    type: `SET_STATE_LEAGUES`,\r\n    payload: state_obj\r\n})","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { filterLeagues } from '../../COMMON/services/helpers/filterLeagues';\r\nimport { getProjection } from \"../../COMMON/services/helpers/getProjection\";\r\nimport { getTrendColor } from \"../../COMMON/services/helpers/getTrendColor\";\r\nimport { setState } from \"../redux/actions\";\r\nimport TableMain from '../../COMMON/components/TableMain';\r\nimport { getUserRoster } from \"../../COMMON/services/helpers/getUserRoster\";\r\n\r\nconst Records = ({\r\n    secondaryTable\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const { user_id, leagues, type1, type2 } = useSelector(state => state.user);\r\n    const { page, itemActive, itemActive2, searched } = useSelector(state => state.leagues);\r\n\r\n\r\n\r\n    const leagues_headers = [\r\n        [\r\n            {\r\n                text: 'League',\r\n                colSpan: 5\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 4\r\n            },\r\n            {\r\n                text: 'FP',\r\n                colSpan: 3\r\n            },\r\n            {\r\n                text: 'FPA',\r\n                colSpan: 3\r\n            },\r\n            {\r\n                text: 'Rank',\r\n                colSpan: 2\r\n            }\r\n        ]\r\n    ];\r\n\r\n    const body = filterLeagues(leagues, type1, type2)\r\n        .map(league => {\r\n\r\n\r\n            const rank = getUserRoster(league.rosters, user_id)?.rank;\r\n\r\n            const record = {\r\n                wins: league.userRoster.settings.wins,\r\n                losses: league.userRoster.settings.losses,\r\n                ties: league.userRoster.settings.ties,\r\n                fpts: parseFloat(league.userRoster.settings.fpts + '.' + league.userRoster.settings.fpts_decimal),\r\n                fpts_against: parseFloat(league.userRoster.settings.fpts_against + '.' + league.userRoster.settings.fpts_against_decimal)\r\n            }\r\n\r\n            return {\r\n                id: league.league_id,\r\n                search: {\r\n                    text: league.name,\r\n                    image: {\r\n                        src: league.avatar,\r\n                        alt: 'league avatar',\r\n                        type: 'league'\r\n                    }\r\n                },\r\n                list: [\r\n                    {\r\n                        text: league.name,\r\n                        colSpan: 5,\r\n                        className: 'left',\r\n                        image: {\r\n                            src: league.avatar,\r\n                            alt: league.name,\r\n                            type: 'league'\r\n                        }\r\n                    },\r\n                    {\r\n                        text: `${record?.wins?.toString() || ''}-${record?.losses?.toString() || ''}`\r\n                            + (league.userRoster.settings.ties > 0 ? `-${league.userRoster.settings.ties}` : ''),\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: (record?.wins + record?.losses > 0 ?\r\n                            (record?.wins / (record?.wins + record?.losses))\r\n                            :\r\n                            '--'\r\n                        ).toLocaleString(\"en-US\", { maximumFractionDigits: 4, minimumFractionDigits: 4 }),\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: record.fpts?.toLocaleString('en-US', { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n                        colSpan: 3\r\n                    },\r\n                    {\r\n                        text: record.fpts_against?.toLocaleString('en-US', { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n                        colSpan: 3\r\n                    },\r\n                    {\r\n                        text: <p\r\n                            className={'stat check'}\r\n                            style={getTrendColor(-((rank / league.rosters.length) - .5), .0025)}\r\n                        >\r\n                            {rank || '-'}\r\n                        </p>,\r\n                        colSpan: 2,\r\n                    }\r\n                ],\r\n                secondary_table: secondaryTable({ league })\r\n            }\r\n        })\r\n\r\n\r\n    console.log({ body })\r\n\r\n    return <>\r\n\r\n        <TableMain\r\n            id={'Leagues'}\r\n            type={'primary'}\r\n            headers={leagues_headers}\r\n            body={body}\r\n            page={page}\r\n            setPage={(value) => dispatch(setState({ page: value }))}\r\n            itemActive={itemActive}\r\n            setItemActive={(value) => dispatch(setState({ itemActive: value }))}\r\n            searched={searched}\r\n            setSearched={(value) => dispatch(setState({ searched: value }))}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default Records;","import Records from \"./Records\";\r\nimport useFetchUserInfo from \"../../COMMON/services/hooks/useFetchUserInfo\";\r\n\r\nconst Leagues1 = ({ secondaryTable }) => {\r\n\r\n    useFetchUserInfo()\r\n\r\n    return <Records\r\n        secondaryTable={secondaryTable}\r\n    />\r\n\r\n\r\n}\r\n\r\nexport default Leagues1;","import Standings from \"../../COMMON/components/Standings\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setState } from \"../redux/actions\";\r\n\r\nconst Leagues2 = ({ ...props }) => {\r\n    const dispatch = useDispatch();\r\n    const { tabSecondary } = useSelector(state => state.leagues);\r\n\r\n\r\n    return <>\r\n        <div className=\"secondary nav\">\r\n\r\n            <button\r\n                className={tabSecondary === 'Standings' ? 'active click' : 'click'}\r\n                onClick={(e) => dispatch(setState({ tabSecondary: 'Standings' }))}\r\n            >\r\n                Standings\r\n            </button>\r\n        </div>\r\n        <Standings {...props} />\r\n    </>\r\n\r\n}\r\n\r\nexport default Leagues2;","import Leagues1 from \"./components/Leagues1\";\r\nimport Leagues2 from \"./components/Leagues2\";\r\n\r\nconst Leagues = () => {\r\n\r\n    return <Leagues1\r\n        secondaryTable={\r\n            (props) => <Leagues2 {...props} />\r\n        }\r\n    />\r\n}\r\n\r\nexport default Leagues;"],"names":["_ref","_league$rosters","_league$rosters$map","league","trade_value_date","current_value_date","useDispatch","itemActive2","setItemActive2","useState","active_roster","rosters","find","x","roster_id","standings","map","roster","username","avatar","wins","settings","losses","ties","fpts","parseFloat","fpts_decimal","fpts_against","fpts_against_decimal","sort","a","b","standings_body","team","index","record","s","id","list","text","colSpan","className","image","src","alt","type","concat","toLocaleString","maximumFractionDigits","minimumFractionDigits","_jsxs","_Fragment","children","_jsx","TableMain","headers","body","itemActive","setItemActive","value","Roster","module","filterLeagues","leagues","type1","type2","filter","include_1","include_2","best_ball","getUserRoster","user_id","r","_r$co_owners","co_owners","co","to_fetch_array","dispatch","params","useParams","isLoadingUser","isLoadingLeagues","useSelector","state","user","allplayers","common","useEffect","_params$username","toLowerCase","resetState","fetchUser","fetchLeagues","fetchCommon","setState","state_obj","tab","payload","secondaryTable","page","searched","_getUserRoster","_record$wins","_record$losses","_record$fpts","_record$fpts_against","rank","userRoster","league_id","search","name","toString","style","getTrendColor","length","secondary_table","console","log","setPage","setSearched","useFetchUserInfo","Records","props","tabSecondary","onClick","e","Standings","Leagues","Leagues1","Leagues2"],"sourceRoot":""}