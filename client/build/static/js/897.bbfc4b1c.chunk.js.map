{"version":3,"file":"static/js/897.bbfc4b1c.chunk.js","mappings":"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","sources":["modules/COMMON/services/helpers/filterLeagues.js","modules/COMMON/services/hooks/useFetchLmPlayerShares.js","modules/Leaguemates/redux/actions.js","modules/COMMON/services/hooks/useFetchLeaguemates.js","modules/Leaguemates/components/LeaguemateRecords.js","modules/Leaguemates/components/Leaguemates1.js","modules/Leaguemates/components/LeaguemateLeagues.js","modules/Leaguemates/components/LeaguematePlayers.js","modules/Leaguemates/components/Leaguemates2.js","modules/Leaguemates/index.js"],"sourcesContent":["\r\nexport const filterLeagues = (leagues, type1, type2) => {\r\n    return (leagues || []).filter(league => {\r\n        let include_1;\r\n\r\n        switch (type1) {\r\n            case ('Redraft'):\r\n                include_1 = league.settings.type !== 2;\r\n                break;\r\n            case ('All'):\r\n                include_1 = true;\r\n                break;\r\n            case ('Dynasty'):\r\n                include_1 = league.settings.type === 2;\r\n                break;\r\n            default:\r\n                include_1 = true;\r\n                break;\r\n        }\r\n\r\n        let include_2;\r\n\r\n        switch (type2) {\r\n            case ('Bestball'):\r\n                include_2 = league.settings.best_ball === 1;\r\n                break;\r\n            case ('All'):\r\n                include_2 = true;\r\n                break;\r\n            case ('Lineup'):\r\n                include_2 = league.settings.best_ball !== 1;\r\n                break;\r\n            default:\r\n                include_2 = true;\r\n                break;\r\n        }\r\n\r\n        return (include_1 && include_2)\r\n    })\r\n}","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchLmPlayerShares } from \"../../redux/actions\";\r\n\r\nconst useFetchLmPlayerShares = () => {\r\n    const dispatch = useDispatch();\r\n    const { user_id, lmplayershares } = useSelector(state => state.user);\r\n\r\n    console.log({lmplayershares})\r\n\r\n    useEffect(() => {\r\n        if (user_id && !lmplayershares) {\r\n            dispatch(fetchLmPlayerShares(user_id))\r\n        }\r\n    }, [user_id, lmplayershares, dispatch])\r\n\r\n}\r\n\r\nexport default useFetchLmPlayerShares","import { setStateUser } from \"../../COMMON/redux/actions\"\r\n\r\nexport const setStateLeaguemates = (state_obj, tab) => ({\r\n    type: `SET_STATE_LEAGUEMATES`,\r\n    payload: state_obj\r\n})\r\n\r\n\r\nexport const fetchLeaguemates = (leagues) => async (dispatch) => {\r\n    const lm_dict = {}\r\n\r\n    leagues\r\n        .forEach(league => {\r\n            league.rosters\r\n                ?.filter(roster => parseInt(roster.user_id) > 0 && roster.user_id !== league.userRoster.user_id && league.userRoster?.players?.length > 0)\r\n                ?.forEach(roster => {\r\n                    let lm_leagues = lm_dict[roster.user_id] || {\r\n                        user_id: roster.user_id,\r\n                        username: roster.username,\r\n                        avatar: roster.avatar,\r\n                        leagues: []\r\n                    }\r\n\r\n                    lm_leagues.leagues.push({\r\n                        ...league,\r\n                        lmRoster: roster\r\n                    })\r\n\r\n                    lm_dict[roster.user_id] = lm_leagues\r\n                })\r\n        })\r\n\r\n        const leaguemates = Object.values(lm_dict);\r\n        console.log({leaguemates})\r\n\r\n        dispatch(setStateUser({ leaguemates: leaguemates }))\r\n}","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchLeaguemates } from \"../../../Leaguemates/redux/actions\";\r\n\r\nconst useFetchLeaguemates = () => {\r\n    const dispatch = useDispatch();\r\n    const { leagues, leaguemates } = useSelector(state => state.user);\r\n\r\n\r\n    useEffect(() => {\r\n        if (leagues && !leaguemates) {\r\n            dispatch(fetchLeaguemates(leagues))\r\n        }\r\n    }, [dispatch, leagues, leaguemates])\r\n\r\n}\r\n\r\nexport default useFetchLeaguemates;","import TableMain from '../../COMMON/components/TableMain';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setStateLeaguemates } from '../redux/actions';\r\nimport { filterLeagues } from '../../COMMON/services/helpers/filterLeagues';\r\nimport { getTrendColor } from '../../COMMON/services/helpers/getTrendColor';\r\n\r\n\r\nconst LeaguemateRecords = ({ secondaryTable }) => {\r\n    const dispatch = useDispatch();\r\n    const { username, type1, type2, leaguemates } = useSelector(state => state.user);\r\n    const { page, itemActive, searched } = useSelector(state => state.leaguemates);\r\n\r\n    console.log({ leaguemates })\r\n\r\n    const leaguemates_headers = [\r\n        [\r\n            {\r\n                text: 'Leaguemate',\r\n                colSpan: 3,\r\n                rowSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: '#',\r\n                colSpan: 1,\r\n                rowSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Leaguemate',\r\n                colSpan: 4,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: username,\r\n                colSpan: 4,\r\n                className: 'half'\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                text: 'Record',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Fpts',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Fpts',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            }\r\n\r\n        ]\r\n    ]\r\n\r\n\r\n    const leaguemates_body = (leaguemates || [])\r\n        ?.filter(x => x.username !== username && (!searched?.id || searched.id === x.user_id))\r\n        ?.sort((a, b) => filterLeagues(b.leagues, type1, type2)?.length - filterLeagues(a.leagues, type1, type2)?.length)\r\n        ?.map(lm => {\r\n            const lm_leagues = filterLeagues(lm.leagues, type1, type2)\r\n\r\n            const lm_wins = lm_leagues?.reduce((acc, cur) => acc + cur.lmRoster.settings?.wins, 0);\r\n            const lm_losses = lm_leagues?.reduce((acc, cur) => acc + cur.lmRoster.settings?.losses, 0);\r\n            const lm_ties = lm_leagues?.reduce((acc, cur) => acc + cur.lmRoster.settings.ties, 0);\r\n            const lm_winpct = lm_wins + lm_losses + lm_ties > 0 && (lm_wins / (lm_wins + lm_losses + lm_ties));\r\n            const lm_fpts = lm.leagues?.reduce(\r\n                (acc, cur) =>\r\n                    acc +\r\n                    parseFloat(\r\n                        cur.lmRoster.settings?.fpts +\r\n                        '.' +\r\n                        cur.lmRoster.settings?.fpts_decimal\r\n                    )\r\n                , 0);\r\n\r\n            const user_wins = lm_leagues?.reduce((acc, cur) => acc + cur.userRoster.settings?.wins, 0);\r\n            const user_losses = lm_leagues?.reduce((acc, cur) => acc + cur.userRoster.settings?.losses, 0);\r\n            const user_ties = lm_leagues?.reduce((acc, cur) => acc + cur.userRoster.settings?.ties, 0);\r\n            const user_winpct = user_wins + user_losses + user_ties > 0 && (user_wins / (user_wins + user_losses + user_ties));\r\n            const user_fpts = lm.leagues?.reduce(\r\n                (acc, cur) =>\r\n                    acc +\r\n                    parseFloat(\r\n                        cur.userRoster.settings?.fpts +\r\n                        '.' +\r\n                        cur.userRoster.settings?.fpts_decimal\r\n                    )\r\n                , 0);\r\n\r\n            return {\r\n                id: lm.user_id,\r\n                search: {\r\n                    text: lm.username,\r\n                    image: {\r\n                        src: lm.avatar,\r\n                        alt: 'user avatar',\r\n                        type: 'user'\r\n                    }\r\n                },\r\n                list: [\r\n                    {\r\n                        text: lm.username || 'Orphan',\r\n                        colSpan: 3,\r\n                        className: 'left',\r\n                        image: {\r\n                            src: lm.avatar,\r\n                            alt: lm.username,\r\n                            type: 'user'\r\n                        }\r\n                    },\r\n                    {\r\n                        text: lm_leagues?.length.toString(),\r\n                        colSpan: 1\r\n                    },\r\n                    {\r\n                        text: <p\r\n                            className={\r\n                                lm_winpct > 0.5\r\n                                    ? 'green stat'\r\n                                    : lm_winpct < 0.5\r\n                                        ? ' red stat'\r\n                                        : 'stat'\r\n                            }\r\n                            style={getTrendColor(lm_winpct - .5, .0005)}\r\n                        >\r\n                            {lm_wins}-{lm_losses}{lm_ties > 0 ? `-${lm_ties}` : ''}\r\n                        </p>,\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: <p\r\n                            className={\r\n                                lm_winpct > 0.5\r\n                                    ? 'green stat'\r\n                                    : lm_winpct < 0.5\r\n                                        ? ' red stat'\r\n                                        : 'stat'\r\n                            }\r\n                            style={getTrendColor(lm_winpct - .5, .0005)}\r\n                        >\r\n                            {lm_fpts?.toLocaleString(\"en-US\", { maximumFractionDigits: 2, minimumFractionDigits: 2 })}\r\n                        </p>,\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: <p\r\n                            className={\r\n                                user_winpct > 0.5\r\n                                    ? 'green stat'\r\n                                    : user_winpct < 0.5\r\n                                        ? ' red stat'\r\n                                        : 'stat'\r\n                            }\r\n                            style={getTrendColor(user_winpct - .5, .0005)}\r\n                        >\r\n                            {user_wins}-{user_losses}{user_ties > 0 ? `-${user_ties}` : ''}\r\n                        </p>,\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: <p\r\n                            className={\r\n                                user_winpct > 0.5\r\n                                    ? 'green stat'\r\n                                    : user_winpct < 0.5\r\n                                        ? ' red stat'\r\n                                        : 'stat'\r\n                            }\r\n                            style={getTrendColor(user_winpct - .5, .0005)}\r\n                        >\r\n                            {user_fpts?.toLocaleString(\"en-US\", { maximumFractionDigits: 2, minimumFractionDigits: 2 })}\r\n                        </p>,\r\n                        colSpan: 2\r\n                    }\r\n                ],\r\n                secondary_table: secondaryTable({ leaguemate: lm })\r\n            }\r\n        })\r\n\r\n\r\n    return <TableMain\r\n        id={'Leaguemates'}\r\n        type={'primary'}\r\n        headers={leaguemates_headers}\r\n        body={leaguemates_body}\r\n        page={page}\r\n        setPage={(page) => dispatch(setStateLeaguemates({ page: page }))}\r\n        itemActive={itemActive}\r\n        setItemActive={(item) => dispatch(setStateLeaguemates({ itemActive: item }))}\r\n        search={true}\r\n        searched={searched}\r\n        setSearched={(searched) => dispatch(setStateLeaguemates({ searched: searched }))}\r\n    />\r\n}\r\n\r\nexport default LeaguemateRecords;","import useFetchLeaguemates from \"../../COMMON/services/hooks/useFetchLeaguemates\";\r\nimport LeaguemateRecords from \"./LeaguemateRecords\";\r\n\r\n\r\nconst Leaguemates1 = ({ secondaryTable }) => {\r\n\r\n    useFetchLeaguemates()\r\n\r\n    return <LeaguemateRecords\r\n        secondaryTable={secondaryTable}\r\n    />\r\n}\r\n\r\nexport default Leaguemates1;","import TableMain from \"../../COMMON/components/TableMain\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setStateLeaguemates } from \"../redux/actions\";\r\nimport Roster from '../../COMMON/components/Roster';\r\nimport { getTrendColor } from \"../../COMMON/services/helpers/getTrendColor\";\r\nimport { filterLeagues } from \"../../COMMON/services/helpers/filterLeagues\";\r\n\r\nconst LeaguemateLeagues = ({\r\n    leaguemate\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const { username, type1, type2 } = useSelector(state => state.user);\r\n    const { page_leagues, itemActive_leagues } = useSelector(state => state.leaguemates);\r\n\r\n    const leaguemateLeagues_headers = [\r\n        [\r\n            {\r\n                text: 'League',\r\n                colSpan: 4,\r\n                rowSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: leaguemate.username,\r\n                colSpan: 4,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: username,\r\n                colSpan: 4,\r\n                className: 'half'\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                text: 'Record',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Rank',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: 'Rank',\r\n                colSpan: 2,\r\n                className: 'half'\r\n            }\r\n        ]\r\n    ]\r\n\r\n    const leaguemateLeagues_body = filterLeagues(leaguemate.leagues, type1, type2).map((lm_league) => {\r\n        return {\r\n            id: lm_league.league_id,\r\n            list: [\r\n                {\r\n                    text: lm_league.name,\r\n                    colSpan: 4,\r\n                    className: 'left',\r\n                    image: {\r\n                        src: lm_league.avatar,\r\n                        alt: 'avatar',\r\n                        type: 'league'\r\n                    }\r\n                },\r\n                {\r\n                    text: `${lm_league.lmRoster.settings.wins}-${lm_league.lmRoster.settings.losses}${lm_league.lmRoster.ties > 0 ? `-${lm_league.lmRoster.ties}` : ''}`,\r\n                    colSpan: 2\r\n\r\n                },\r\n                {\r\n                    text: <p\r\n                        className={'stat check'}\r\n                        style={getTrendColor(- ((lm_league.lmRoster.rank / lm_league.rosters.length) - .5), .0025)\r\n                        }\r\n                    >\r\n                        {lm_league.lmRoster.rank}\r\n                    </p>,\r\n                    colSpan: 2,\r\n                    className: lm_league.lmRoster.rank / lm_league.rosters.length <= .25 ? 'green' :\r\n                        lm_league.lmRoster.rank / lm_league.rosters.length >= .75 ? 'red' :\r\n                            null\r\n                },\r\n                {\r\n                    text: `${lm_league.userRoster.settings.wins}-${lm_league.userRoster.settings.losses}${lm_league.userRoster.ties > 0 ? `-${lm_league.userRoster.ties}` : ''}`,\r\n                    colSpan: 2\r\n                },\r\n                {\r\n                    text: <p\r\n                        className={'stat check'}\r\n                        style={getTrendColor(- ((lm_league.userRoster.rank / lm_league.rosters.length) - .5), .0025)\r\n                        }\r\n                    >\r\n                        {lm_league.userRoster.rank}\r\n                    </p>,\r\n                    colSpan: 2,\r\n                    className: lm_league.userRoster.rank / lm_league.rosters.length <= .25 ? 'green' :\r\n                        lm_league.userRoster.rank / lm_league.rosters.length >= .75 ? 'red' :\r\n                            null\r\n                }\r\n            ],\r\n            secondary_table: (\r\n                <>\r\n                    <Roster\r\n                        roster={lm_league.lmRoster}\r\n                        league={lm_league}\r\n                        type={'tertiary half'}\r\n                    />\r\n                    <Roster\r\n                        roster={lm_league.userRoster}\r\n                        league={lm_league}\r\n                        type={'tertiary half'}\r\n                    />\r\n                </>\r\n            )\r\n\r\n        }\r\n    })\r\n\r\n    return <TableMain\r\n        id={'Players'}\r\n        type={'secondary'}\r\n        headers={leaguemateLeagues_headers}\r\n        body={leaguemateLeagues_body}\r\n        page={page_leagues}\r\n        setPage={(page) => dispatch(setStateLeaguemates({ page_leagues: page }))}\r\n        itemActive={itemActive_leagues}\r\n        setItemActive={(itemActive) => dispatch(setStateLeaguemates({ itemActive_leagues: itemActive }))}\r\n    />\r\n}\r\n\r\nexport default LeaguemateLeagues;","import TableMain from \"../../COMMON/components/TableMain\";\r\nimport { useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setStateLeaguemates } from \"../redux/actions\";\r\nimport { filterLeagues } from \"../../COMMON/services/helpers/filterLeagues\";\r\n\r\nconst LeaguematePlayers = ({ leaguemate }) => {\r\n    const dispatch = useDispatch();\r\n    const { allplayers } = useSelector(state => state.common);\r\n    const { username, type1, type2, lmplayershares, userPlayerShares } = useSelector(state => state.user);\r\n    const { page_players_c, page_players_a, itemActive_players, searched_players, sortBy, secondaryContent } = useSelector(state => state.leaguemates);\r\n\r\n    console.log({ lmplayershares})\r\n\r\n    let keys;\r\n\r\n    switch (`${type1}-${type2}`) {\r\n        case 'All-All':\r\n            keys = ['all']\r\n            break;\r\n        case 'Redraft-All':\r\n            keys = ['r_b', 'r_s'];\r\n\r\n            break;\r\n        case 'Dynasty-All':\r\n            keys = ['d_b', 'd_s'];\r\n\r\n            break;\r\n        case 'All-Bestball':\r\n            keys = ['r_b', 'd_b'];\r\n\r\n            break;\r\n        case 'All-Standard':\r\n            keys = ['r_s', 'd_s'];\r\n\r\n            break;\r\n        default:\r\n            break;\r\n    };\r\n\r\n    const playersCount = useMemo(() => {\r\n        const players_all = []\r\n\r\n        filterLeagues(leaguemate.leagues, type1, type2).map(league => {\r\n            return league.lmRoster.players.map(player => {\r\n                return players_all.push({\r\n                    id: player,\r\n                    league: league,\r\n                    type: 'lm',\r\n                    wins: league.lmRoster.settings.wins,\r\n                    losses: league.lmRoster.settings.losses,\r\n                    ties: league.lmRoster.settings.ties\r\n                })\r\n            }) &&\r\n                league.userRoster.players.map(player => {\r\n                    return players_all.push({\r\n                        id: player,\r\n                        league: league,\r\n                        type: 'user',\r\n                        wins: league.userRoster.settings.wins,\r\n                        losses: league.userRoster.settings.losses,\r\n                        ties: league.userRoster.settings.ties\r\n                    })\r\n                })\r\n        })\r\n\r\n        const players_count = []\r\n\r\n        players_all\r\n            .forEach(player => {\r\n                const index = players_count.findIndex(obj => {\r\n                    return obj.id === player.id\r\n                })\r\n                if (index === -1) {\r\n                    let leagues_lm = players_all.filter(x => x.id === player.id && x.type === 'lm')\r\n                    let leagues_user = players_all.filter(x => x.id === player.id && x.type === 'user')\r\n\r\n                    const lm_record = leagues_lm.reduce((acc, cur) => {\r\n                        return {\r\n                            wins: acc.wins + cur.wins,\r\n                            losses: acc.losses + cur.losses,\r\n                            ties: acc.ties + cur.ties\r\n                        }\r\n                    }, {\r\n                        wins: 0,\r\n                        losses: 0,\r\n                        ties: 0\r\n                    })\r\n\r\n                    const user_record = leagues_user.reduce((acc, cur) => {\r\n                        return {\r\n                            wins: acc.wins + cur.wins,\r\n                            losses: acc.losses + cur.losses,\r\n                            ties: acc.ties + cur.ties\r\n                        }\r\n                    }, {\r\n                        wins: 0,\r\n                        losses: 0,\r\n                        ties: 0\r\n                    })\r\n\r\n                    players_count.push({\r\n                        id: player.id,\r\n                        leagues_lm: leagues_lm,\r\n                        lm_record: lm_record,\r\n                        leagues_user: leagues_user,\r\n                        user_record: user_record\r\n                    })\r\n                }\r\n\r\n            })\r\n\r\n        return players_count;\r\n\r\n    }, [leaguemate, type1, type2])\r\n\r\n\r\n    const leaguematePlayers_headers = [\r\n        [\r\n            {\r\n                text: 'Player',\r\n                colSpan: 4,\r\n                rowSpan: 2,\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: leaguemate.username,\r\n                colSpan: 4,\r\n                onClick: () => dispatch(setStateLeaguemates({ sortBy: 'Leaguemate' })),\r\n                className: 'half'\r\n            },\r\n            {\r\n                text: username,\r\n                colSpan: 4,\r\n                onClick: () => dispatch(setStateLeaguemates({ sortBy: 'User' })),\r\n                className: 'half'\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                text: 'Count',\r\n                colSpan: 1,\r\n                className: 'small half',\r\n                onClick: () => dispatch(setStateLeaguemates({ sortBy: 'Leaguemate' })),\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 3,\r\n                className: 'small half',\r\n                onClick: () => dispatch(setStateLeaguemates({ sortBy: 'Leaguemate' })),\r\n            },\r\n            {\r\n                text: 'Count',\r\n                colSpan: 1,\r\n                className: 'small half',\r\n                onClick: () => dispatch(setStateLeaguemates({ sortBy: 'User' })),\r\n            },\r\n            {\r\n                text: 'Record',\r\n                colSpan: 3,\r\n                className: 'small half',\r\n                onClick: () => dispatch(setStateLeaguemates({ sortBy: 'User' })),\r\n            }\r\n        ]\r\n    ]\r\n\r\n    const leaguematePlayers_body = playersCount\r\n        .filter(player => !searched_players.id || player.id === searched_players.id)\r\n        .sort((a, b) => sortBy === 'Leaguemate'\r\n            ? b.leagues_lm?.length - a.leagues_lm?.length\r\n            : b.leagues_user?.length - a.leagues_user?.length\r\n        )\r\n        .map(player => {\r\n            const lm_wins = player.lm_record.wins;\r\n            const lm_losses = player.lm_record.losses;\r\n            const lm_ties = player.lm_record.ties;\r\n\r\n            const user_wins = player.user_record.wins;\r\n            const user_losses = player.user_record.losses;\r\n            const user_ties = player.user_record.ties;\r\n\r\n            return {\r\n                id: player.id,\r\n                search: {\r\n                    text: allplayers[player.id]?.full_name,\r\n                    image: {\r\n                        src: player.id,\r\n                        alt: 'player headshot',\r\n                        type: 'player'\r\n                    }\r\n                },\r\n                list: [\r\n                    {\r\n                        text: allplayers[player.id]?.full_name,\r\n                        colSpan: 4,\r\n                        className: 'left',\r\n                        image: {\r\n                            src: player.id,\r\n                            alt: 'player headshot',\r\n                            type: 'player'\r\n                        }\r\n                    },\r\n                    {\r\n                        text: (allplayers[player.id] && player.leagues_lm.length) || '0',\r\n                        colSpan: 1\r\n                    },\r\n                    {\r\n                        text: allplayers[player.id] && (lm_wins + '-' + lm_losses + (lm_ties > 0 ? `-${lm_ties}` : '')),\r\n                        colSpan: 3\r\n                    },\r\n                    {\r\n                        text: (allplayers[player.id] && player.leagues_user.length) || '0',\r\n                        colSpan: 1\r\n                    },\r\n                    {\r\n                        text: allplayers[player.id] && (user_wins + '-' + user_losses + (user_ties > 0 ? `-${user_ties}` : '')),\r\n                        colSpan: 3\r\n                    }\r\n                ],\r\n                secondary_table: ''\r\n\r\n            }\r\n        })\r\n\r\n    const leaguematePlayersAll_body = Object.keys(allplayers)\r\n        .filter(player_id => allplayers[player_id]?.full_name && (!searched_players.id || player_id === searched_players.id))\r\n        .sort((a, b) => sortBy === 'Leaguemate'\r\n            ? keys?.reduce((acc, cur) => acc + (lmplayershares?.[b]?.[cur]?.[0] || 0), 0) - keys?.reduce((acc, cur) => acc + (lmplayershares?.[a]?.[cur]?.[0] || 0), 0)\r\n            : keys?.reduce((acc, cur) => acc + (userPlayerShares[b]?.[cur]?.[0] || 0), 0) - keys?.reduce((acc, cur) => acc + (userPlayerShares[a]?.[cur]?.[0] || 0), 0)\r\n        )\r\n        .map(player_id => {\r\n\r\n            return {\r\n                id: player_id,\r\n                search: {\r\n                    text: allplayers[player_id]?.full_name,\r\n                    image: {\r\n                        src: player_id,\r\n                        alt: 'player headshot',\r\n                        type: 'player'\r\n                    }\r\n                },\r\n                list: [\r\n                    {\r\n                        text: allplayers[player_id]?.full_name || '-',\r\n                        colSpan: 4,\r\n                        className: 'left',\r\n                        image: {\r\n                            src: player_id,\r\n                            alt: 'player',\r\n                            type: 'player'\r\n                        }\r\n                    },\r\n                    {\r\n                        text: keys?.reduce((acc, cur) => acc + (lmplayershares?.[player_id]?.[cur]?.[0] || 0), 0) || '0',\r\n                        colSpan: 1\r\n                    },\r\n                    {\r\n                        text: keys?.reduce((acc, cur) => acc + (lmplayershares?.[player_id]?.[cur]?.[1] || 0), 0) > 0\r\n                            ? (\r\n                                keys?.reduce((acc, cur) => acc + (lmplayershares?.[player_id]?.[cur]?.[0] || 0), 0)\r\n                                / keys?.reduce((acc, cur) => acc + (lmplayershares?.[player_id]?.[cur]?.[1] || 0), 0)\r\n                                * 100\r\n                            ).toFixed(1)\r\n                            : '-',\r\n                        colSpan: 2\r\n                    },\r\n                    {\r\n                        text: keys?.reduce((acc, cur) => acc + (userPlayerShares[player_id]?.[cur]?.[0] || 0), 0) || '0',\r\n                        colSpan: 1\r\n                    },\r\n                    {\r\n                        text: keys?.reduce((acc, cur) => acc + (userPlayerShares[player_id]?.[cur]?.[1] || 0), 0) > 0\r\n                            ? (\r\n                                keys?.reduce((acc, cur) => acc + (userPlayerShares[player_id]?.[cur]?.[0] || 0), 0)\r\n                                / keys?.reduce((acc, cur) => acc + (userPlayerShares[player_id]?.[cur]?.[1] || 0), 0)\r\n                                * 100\r\n                            ).toFixed(1)\r\n                            : '-',\r\n                        colSpan: 2\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n\r\n    return <TableMain\r\n        id={'Players'}\r\n        type={'secondary'}\r\n        headers={leaguematePlayers_headers}\r\n        body={secondaryContent === 'Players-all' ? leaguematePlayersAll_body : leaguematePlayers_body}\r\n        page={secondaryContent === 'Players-all' ? page_players_a : page_players_c}\r\n        setPage={(page) => secondaryContent === 'Players-all' ? dispatch(setStateLeaguemates({ page_players_a: page })) : dispatch(setStateLeaguemates({ page_players_c: page }))}\r\n       // itemActive={itemActive_players}\r\n       // setItemActive={(itemActive) => dispatch(setStateLeaguemates({ itemActive_players: itemActive }))}\r\n    />\r\n}\r\n\r\nexport default LeaguematePlayers;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setStateLeaguemates } from \"../redux/actions\";\r\nimport LeaguemateLeagues from \"./LeaguemateLeagues\";\r\nimport LeaguematePlayers from \"./LeaguematePlayers\";\r\nimport useFetchLmPlayerShares from \"../../COMMON/services/hooks/useFetchLmPlayerShares\";\r\n\r\nconst Leaguemates2 = ({ ...props }) => {\r\n    const dispatch = useDispatch();\r\n    const { secondaryContent } = useSelector(state => state.leaguemates);\r\n\r\n    useFetchLmPlayerShares()\r\n\r\n    return <>\r\n        <div className=\"secondary nav\">\r\n\r\n                <button\r\n                    className={secondaryContent === 'Leagues' ? 'active click' : 'click'}\r\n                    onClick={() => dispatch(setStateLeaguemates({ secondaryContent: 'Leagues' }))}\r\n                >\r\n                    Leagues\r\n                </button>\r\n                <button\r\n                    className={secondaryContent === 'Players-common' ? 'active click' : 'click'}\r\n                    onClick={() => dispatch(setStateLeaguemates({ secondaryContent: 'Players-common' }))}\r\n                >\r\n                    Players <em className=\"small\">(common leagues)</em>\r\n                </button>\r\n                <button\r\n                    className={secondaryContent === 'Players-all' ? 'active click' : 'click'}\r\n                    onClick={() => dispatch(setStateLeaguemates({ secondaryContent: 'Players-all' }))}\r\n                    disabled={true}\r\n                >\r\n                    Players <em className=\"small\">(all leagues)</em>\r\n                </button>\r\n   \r\n        </div>\r\n        {\r\n            secondaryContent === 'Leagues'\r\n                ? <LeaguemateLeagues {...props} />\r\n                : <LeaguematePlayers {...props} />\r\n        }\r\n    </>\r\n}\r\nexport default Leaguemates2;","import Leaguemates1 from \"./components/Leaguemates1\";\r\nimport Leaguemates2 from \"./components/Leaguemates2\";\r\n\r\nconst Leaguemates = () => {\r\n\r\n    return <Leaguemates1\r\n        secondaryTable={\r\n            (props) => {\r\n                return <Leaguemates2\r\n                    {...props}\r\n                />\r\n            }\r\n        }   \r\n    />\r\n}\r\n\r\nexport default Leaguemates;"],"names":["filterLeagues","leagues","type1","type2","filter","league","include_1","include_2","settings","type","best_ball","useFetchLmPlayerShares","dispatch","useDispatch","user_id","lmplayershares","useSelector","state","user","console","log","useEffect","fetchLmPlayerShares","setStateLeaguemates","state_obj","tab","payload","useFetchLeaguemates","leaguemates","async","lm_dict","forEach","_league$rosters","_league$rosters$filte","rosters","roster","_league$userRoster","_league$userRoster$pl","parseInt","userRoster","players","length","lm_leagues","username","avatar","push","lmRoster","Object","values","setStateUser","fetchLeaguemates","_ref","_ref2","_ref2$filter","_ref2$filter$sort","secondaryTable","page","itemActive","searched","leaguemates_headers","text","colSpan","rowSpan","className","leaguemates_body","x","id","sort","a","b","_filterLeagues","_filterLeagues2","map","lm","_lm$leagues","_lm$leagues2","lm_wins","reduce","acc","cur","_cur$lmRoster$setting","wins","lm_losses","_cur$lmRoster$setting2","losses","lm_ties","ties","lm_winpct","lm_fpts","_cur$lmRoster$setting3","_cur$lmRoster$setting4","parseFloat","fpts","fpts_decimal","user_wins","_cur$userRoster$setti","user_losses","_cur$userRoster$setti2","user_ties","_cur$userRoster$setti3","user_winpct","user_fpts","_cur$userRoster$setti4","_cur$userRoster$setti5","search","image","src","alt","list","toString","_jsxs","style","getTrendColor","children","concat","_jsx","toLocaleString","maximumFractionDigits","minimumFractionDigits","secondary_table","leaguemate","TableMain","headers","body","setPage","setItemActive","item","setSearched","LeaguemateRecords","page_leagues","itemActive_leagues","leaguemateLeagues_headers","leaguemateLeagues_body","lm_league","league_id","name","rank","_Fragment","Roster","allplayers","common","userPlayerShares","page_players_c","page_players_a","itemActive_players","searched_players","sortBy","secondaryContent","keys","playersCount","useMemo","players_all","player","players_count","findIndex","obj","leagues_lm","leagues_user","lm_record","user_record","leaguematePlayers_headers","onClick","leaguematePlayers_body","_b$leagues_lm","_a$leagues_lm","_b$leagues_user","_a$leagues_user","_allplayers$player$id","_allplayers$player$id2","full_name","leaguematePlayersAll_body","player_id","_allplayers$player_id","_keys","_keys2","_keys3","_keys4","_lmplayershares$b","_lmplayershares$b$cur","_lmplayershares$a","_lmplayershares$a$cur","_userPlayerShares$b","_userPlayerShares$b$c","_userPlayerShares$a","_userPlayerShares$a$c","_allplayers$player_id2","_allplayers$player_id3","_keys5","_keys6","_keys7","_keys8","_keys9","_keys10","_keys11","_keys12","_lmplayershares$playe","_lmplayershares$playe2","_lmplayershares$playe3","_lmplayershares$playe4","_lmplayershares$playe5","_lmplayershares$playe6","_lmplayershares$playe7","_lmplayershares$playe8","toFixed","_userPlayerShares$pla","_userPlayerShares$pla2","_userPlayerShares$pla3","_userPlayerShares$pla4","_userPlayerShares$pla5","_userPlayerShares$pla6","_userPlayerShares$pla7","_userPlayerShares$pla8","props","disabled","LeaguemateLeagues","LeaguematePlayers","Leaguemates","Leaguemates1","Leaguemates2"],"sourceRoot":""}